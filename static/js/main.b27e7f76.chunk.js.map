{"version":3,"sources":["redux/dialogsReducer.js","components/Users/User.module.css","api/api.js","components/Navbar/Navbar.module.css","reportWebVitals.js","components/Navbar/Navbar.jsx","components/News/News.jsx","components/Music/Music.jsx","components/Settings/Settings.jsx","components/common/Paginator/Paginator.jsx","components/Users/User.jsx","components/Users/Users.jsx","utils/objects-helpers.js","redux/usersReducer.js","redux/usersSelectors.js","components/Users/UsersContainer.jsx","components/Header/flag.jpg","components/Header/Header.jsx","redux/authReducer.js","components/Header/HeaderContainer.jsx","components/Login/Login.jsx","redux/appReducer.js","redux/reduxStore.js","hoc/withSuspense.js","App.js","index.js","components/common/FormControls/FormControls.js","components/common/FormControls/FormControls.module.css","assets/images/preloader.svg","components/common/Preloader/Preloader.jsx","components/common/Paginator/Paginator.module.css","utils/validators/validators.js","components/Header/Header.module.css","redux/profileReducer.js","assets/images/common_avatar.jpg"],"names":["SEND_MESSAGE","sendMessage","newMessageText","type","initialDialogsState","dialogs","id","name","messages","message","dialogsReducer","dialogsState","action","newMessage","module","exports","instance","axios","create","baseURL","withCredentials","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userId","post","unfollow","delete","profileAPI","getUserProfile","getUserStatus","updateUserStatus","status","put","authAPI","isIdentified","login","email","password","rememberMe","logout","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Navbar","className","css","nav","item","to","activeClassName","active","News","Music","Settings","Paginator","totalItemsCount","onPageChange","portionSize","pagesCount","Math","ceil","pages","i","push","portionsCount","useState","portionNumber","setPortionNumber","leftBorderOfThePortion","rightBorderOfThePortion","paginator","onClick","filter","page","map","classNames","selectedPage","pageNumber","e","User","user","followingInProgress","src","photos","small","common_avatar","alt","userAvatar","followed","disabled","some","Users","props","users","totalUsersCount","updateObjectInArray","items","itemId","objPropName","newObjProps","FOLLOW_SUCCESS","followSuccess","UNFOLLOW_SUCCESS","unfollowSuccess","SET_USERS","SET_CURRENT_PAGE","setCurrentPage","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","toggleIsFetching","isFetching","TOGGLE_FOLLOWING_PROGRESS","toggleFollowingProgress","followUnfollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","initialUsersState","usersReducer","usersState","createSelector","state","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","requestUsers","this","Preloader","React","Component","compose","connect","totalCount","bind","Header","header","flag","loginBlock","isAuth","SER_AUTH_USER_DATA","setAuthUserData","getAuthUserData","initialState","authReducer","authState","HeaderContainer","LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","createField","required","Input","formSummaryError","length","stopSubmit","_error","formData","INITIALIZED_SUCCESS","initialized","appReducer","appState","store","createStore","require","combineReducers","profileState","profileReducer","formReducer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","applyMiddleware","thunkMiddleware","withSuspense","fallback","ProfileContainer","lazy","DialogsContainer","App","initializeApp","path","render","AppContainer","withRouter","promise","Promise","all","PiratesApp","basename","process","ReactDOM","document","getElementById","FormControl","input","meta","touched","Formtype","hasError","formControl","Textarea","placeholder","validate","component","text","preloader","value","maxLengthCreator","maxLength","ADD_NEW_POST","addNewPost","newPostText","SET_USER_PROFILE","SET_USER_STATUS","setUserStatus","newStatus","DELETE_POST","profile","initialProfileState","posts","likesCount","newPost","postId"],"mappings":"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","file":"static/js/main.b27e7f76.chunk.js","sourcesContent":["// Reducer принимает на вход state и action и возвращает измененный (на основании action) state.\n// Action это объект содержащий информацию о том что мы хотим изменить.\n\n// ACTION CREATORS:\nconst SEND_MESSAGE = 'pirateSocialNetwork/dialogs/SEND-MESSAGE';\nexport const sendMessage = (newMessageText) => ({type: SEND_MESSAGE, newMessageText});\n\nconst initialDialogsState = {\n    dialogs: [\n        {id: 1, name: 'Captain Cartman'},\n        {id: 2, name: 'Peter Blood'},\n        {id: 3, name: 'Fleet Master Seahorn'},\n        {id: 4, name: 'Red Beard'},\n        {id: 5, name: 'Rock’n’Rolf'},\n        {id: 6, name: 'Pirate burb'},\n    ],\n    messages: [\n        {id: 1, message: 'Who\\'s there?! Oo'},\n        {id: 2, message: 'Yarrrrr!'},\n        {id: 3, message: 'Fifteen men on the dead man\\'s chest! Yo-ho-ho, and a bottle of rum!'},\n        {id: 4, message: 'Red Beard is oaf :P'},\n    ]\n};\n\nconst dialogsReducer = (dialogsState = initialDialogsState, action) => {\n    // В виду специфики работы react-redux, из редьюсера нужно возвращать не измененный state,\n    // а его копию с новыми изменениями. Глубоко копируем только то что собираемся менять.\n    switch (action.type) {\n        case SEND_MESSAGE:\n            const newMessage = {id: 5, message: action.newMessageText};\n            return {\n                ...dialogsState,\n                messages: [...dialogsState.messages, newMessage],\n            };\n        default:\n            return dialogsState;\n    }\n};\n\nexport default dialogsReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userAvatar\":\"User_userAvatar__1-Q_0\"};","import axios from \"axios\";\n\n// Создание единого шаблона для похожих axios-запросов.\nconst instance = axios.create({\n    // Основная повторяющаяся часть URL.\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    // Вместе с запросом передается куки.\n    withCredentials: true,\n    // Все запросы кроме get, как правило требуют ключ доступа.\n    headers: {\"API-KEY\": \"f841d812-c73f-4d3d-a2fd-8879f3cbde4b\"},\n})\n\nexport const usersAPI = {\n    getUsers(currentPage, pageSize) {\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\n            .then(response => response.data);\n    },\n    follow(userId) {\n        return instance.post(`follow/${userId}`)\n            .then(response => response.data);\n    },\n    unfollow(userId) {\n        return instance.delete(`follow/${userId}`)\n            .then(response => response.data);\n    },\n};\n\nexport const profileAPI = {\n    getUserProfile(userId) {\n        return instance.get(`profile/${userId}`)\n            .then(response => response.data);\n    },\n    getUserStatus(userId) {\n        return instance.get(`profile/status/${userId}`)\n            .then(response => response.data);\n    },\n    updateUserStatus(status) {\n        return instance.put(`profile/status`, {status: status})\n            .then(response => response.data);\n    },\n};\n\nexport const authAPI = {\n    isIdentified() {\n        return instance.get(`auth/me`)\n            .then(response => response.data);\n    },\n    login(email, password, rememberMe = false) {\n        return instance.post(`auth/login`, {email, password, rememberMe})\n            .then(response => response.data);\n    },\n    logout() {\n        return instance.delete(`auth/login`)\n            .then(response => response.data);\n    },\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2imOE\",\"item\":\"Navbar_item__zmMk4\",\"active\":\"Navbar_active__3mbhk\"};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import css from \"./Navbar.module.css\";\nimport {NavLink} from \"react-router-dom\";\n\nconst Navbar = () => {\n    // NavLink меняет адрес в адресной строке не перезагружая страницу.\n    return (\n        <nav className={css.nav}>\n            <div className={css.item}>\n                <NavLink to=\"/profile\" activeClassName={css.active}>Profile</NavLink>\n            </div>\n            <div className={css.item}>\n                <NavLink to=\"/dialogs\" activeClassName={css.active}>Dialogs</NavLink>\n            </div>\n            <div className={css.item}>\n                <NavLink to=\"/users\" activeClassName={css.active}>Users</NavLink>\n            </div>\n            <div className={css.item}>\n                <NavLink to=\"/news\" activeClassName={css.active}>News</NavLink>\n            </div>\n            <div className={css.item}>\n                <NavLink to=\"/music\" activeClassName={css.active}>Music</NavLink>\n            </div>\n            <div className={css.item}>\n                <NavLink to=\"/settings\" activeClassName={css.active}>Settings</NavLink>\n            </div>\n        </nav>\n    );\n};\n\nexport default Navbar;\n","import css from \"./News.module.css\";\n\nconst News = () => {\n    return (\n        <div>\n            News\n        </div>\n    );\n};\n\nexport default News;","import css from \"./Music.module.css\";\n\nconst Music = () => {\n    return (\n        <div>\n            Music\n        </div>\n    );\n};\n\nexport default Music;","import css from \"./Settings.module.css\";\n\nconst Settings = () => {\n    return (\n        <div>\n            Settings\n        </div>\n    );\n};\n\nexport default Settings;","import css from \"./Paginator.module.css\";\nimport React, {useState} from \"react\";\nimport classNames from \"classnames\";\n\nconst Paginator = ({pageSize, totalItemsCount, currentPage, onPageChange, portionSize = 10}) => {\n\n    const pagesCount = Math.ceil(totalItemsCount / pageSize);\n    const pages = [];\n    for (let i = 1; i <= pagesCount; i += 1) {\n        pages.push(i);\n    }\n\n    const portionsCount = Math.ceil(pagesCount / portionSize);\n\n    // Хук useState возвращает массив из 2 значений.\n    // Первое это непосредственно наш state. Второе это функция для изменения этого state.\n    // Через аргумент задается initialState.\n    const [portionNumber, setPortionNumber] = useState(1);\n\n    const leftBorderOfThePortion = (portionNumber - 1) * portionSize + 1;\n    const rightBorderOfThePortion = portionNumber * portionSize;\n\n    return (\n        <div className={css.paginator}>\n            {portionNumber > 1 && <button onClick={() => setPortionNumber(portionNumber - 1)}>Previous</button>}\n            {\n                // Текущей странице задается класс selectedPage.\n                // В анонимную функцию приходит e, но мы его не используем.\n                pages\n                    .filter(page => page >= leftBorderOfThePortion && page <= rightBorderOfThePortion)\n                    .map(page => <span\n                        className={classNames({[css.selectedPage]: currentPage === page}, css.pageNumber)}\n                        onClick={(e) => onPageChange(page)} key={page}>{page}</span>)\n            }\n            {portionNumber < portionsCount && <button onClick={() => setPortionNumber(portionNumber + 1)}>Next</button>}\n        </div>\n    );\n}\n\nexport default Paginator;","import css from \"./User.module.css\";\nimport common_avatar from \"../../assets/images/common_avatar.jpg\";\nimport React from \"react\";\nimport {NavLink} from \"react-router-dom\";\n\nconst User = ({user, followingInProgress, follow, unfollow}) => {\n    return (\n        <div>\n            <span>\n                <div>\n                    <NavLink to={'/profile/' + user.id}>\n                        <img src={user.photos.small !== null ? user.photos.small : common_avatar}\n                             alt=\"Avatar\" className={css.userAvatar}/>\n                    </NavLink>\n                </div>\n                <div>\n                    {user.followed\n                        // Кнопка не активна, если процесс follow/unfollow еще не завершен.\n                        ? <button disabled={followingInProgress.some(id => id === user.id)}\n                                  onClick={() => unfollow(user.id)}>Unfollow</button>\n                        : <button disabled={followingInProgress.some(id => id === user.id)}\n                                  onClick={() => follow(user.id)}>Follow</button>\n                    }\n                </div>\n            </span>\n            <span>\n                <span>\n                    <div>{user.name}</div>\n                    <div>{user.status}</div>\n                </span>\n                <span>\n                    <div>{'user.location.country'}</div>\n                    <div>{'user.location.city'}</div>\n                </span>\n            </span>\n        </div>);\n}\n\nexport default User;","import React from \"react\";\nimport Paginator from \"../common/Paginator/Paginator\";\nimport User from \"./User\";\n\nconst Users = (props) => {\n    const {follow, unfollow, users, pageSize, totalUsersCount, currentPage, onPageChange, followingInProgress} = props;\n\n    return (\n        <div>\n            <Paginator currentPage={currentPage}\n                       onPageChange={onPageChange}\n                       totalItemsCount={totalUsersCount}\n                       pageSize={pageSize}/>\n            <div>\n                {users.map(user => <User user={user}\n                                         key={user.id}\n                                         follow={follow}\n                                         unfollow={unfollow}\n                                         followingInProgress={followingInProgress}/>)}\n            </div>\n        </div>\n    );\n}\n\nexport default Users;","export const updateObjectInArray = (items, itemId, objPropName, newObjProps) => {\n    return items.map(item => {\n        if (item[objPropName] === itemId) {\n            return {...item, ...newObjProps}\n        }\n        return item;\n    })\n}","import {usersAPI} from \"../api/api\";\nimport {updateObjectInArray} from \"../utils/objects-helpers\";\n\n// Reducer принимает на вход state и action и возвращает измененный (на основании action) state.\n// Action это объект содержащий информацию о том что мы хотим изменить.\n\n// ACTION CREATORS:\nconst FOLLOW_SUCCESS = 'pirateSocialNetwork/users/FOLLOW_SUCCESS';\nexport const followSuccess = (userId) => ({type: FOLLOW_SUCCESS, userId});\n\nconst UNFOLLOW_SUCCESS = 'pirateSocialNetwork/users/UNFOLLOW_SUCCESS';\nexport const unfollowSuccess = (userId) => ({type: UNFOLLOW_SUCCESS, userId});\n\nconst SET_USERS = 'pirateSocialNetwork/users/SET_USERS';\nexport const setUsers = (users) => ({type: SET_USERS, users});\n\nconst SET_CURRENT_PAGE = 'pirateSocialNetwork/users/SET_CURRENT_PAGE';\nexport const setCurrentPage = (currentPage) => ({type: SET_CURRENT_PAGE, currentPage});\n\nconst SET_TOTAL_USERS_COUNT = 'pirateSocialNetwork/users/SET_TOTAL_USERS_COUNT';\nexport const setTotalUsersCount = (totalUsersCount) => ({type: SET_TOTAL_USERS_COUNT, totalUsersCount});\n\nconst TOGGLE_IS_FETCHING = 'pirateSocialNetwork/users/TOGGLE_IS_FETCHING';\nexport const toggleIsFetching = (isFetching) => ({type: TOGGLE_IS_FETCHING, isFetching});\n\nconst TOGGLE_FOLLOWING_PROGRESS = 'pirateSocialNetwork/users/TOGGLE_FOLLOWING_PROGRESS';\nexport const toggleFollowingProgress = (followingInProgress, userId) => ({\n    type: TOGGLE_FOLLOWING_PROGRESS, followingInProgress, userId\n});\n\n// THUNKS это функции которые сначала делают асинхронные операции, а потом диспатчат actions.\n// Необходимые параметры передаются при помощи замыкания.\nexport const requestUsers = (currentPage, pageSize) => async (dispatch) => {\n    dispatch(toggleIsFetching(true));\n    dispatch(setCurrentPage(currentPage));\n    const data = await usersAPI.getUsers(currentPage, pageSize);\n    dispatch(toggleIsFetching(false));\n    dispatch(setUsers(data.items));\n    dispatch(setTotalUsersCount(data.totalCount));\n};\n\n// Объединение общей логики для follow и unfollow.\nconst followUnfollowFlow = async (dispatch, userId, apiMethod, actionCreator) => {\n    dispatch(toggleFollowingProgress(true, userId));\n    const data = await apiMethod(userId);\n    if (data.resultCode === 0) {\n        dispatch(actionCreator(userId));\n    }\n    dispatch(toggleFollowingProgress(false, userId));\n}\n\nexport const follow = (userId) => async (dispatch) => {\n    await followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess);\n};\n\nexport const unfollow = (userId) => async (dispatch) => {\n    await followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess);\n};\n\nconst initialUsersState = {\n    users: [],\n    pageSize: 10,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: false,\n    followingInProgress: [],\n};\n\nconst usersReducer = (usersState = initialUsersState, action) => {\n    // В виду специфики работы react-redux, из редьюсера нужно возвращать не измененный state,\n    // а его копию с новыми изменениями. Глубоко копируем только то что собираемся менять.\n    switch (action.type) {\n        case FOLLOW_SUCCESS:\n            return {\n                ...usersState,\n                users: updateObjectInArray(usersState.users, action.userId, \"id\", {followed: true}),\n            }\n        case UNFOLLOW_SUCCESS:\n            return {\n                ...usersState,\n                users: updateObjectInArray(usersState.users, action.userId, \"id\", {followed: false}),\n            }\n        case SET_USERS:\n            return {...usersState, users: action.users};\n        case SET_CURRENT_PAGE:\n            return {...usersState, currentPage: action.currentPage};\n        case SET_TOTAL_USERS_COUNT:\n            return {...usersState, totalUsersCount: action.totalUsersCount};\n        case TOGGLE_IS_FETCHING:\n            return {...usersState, isFetching: action.isFetching};\n        case TOGGLE_FOLLOWING_PROGRESS:\n            return {\n                ...usersState,\n                followingInProgress: action.followingInProgress\n                    // Процесс идет - добавляем id в массив.\n                    ? [...usersState.followingInProgress, action.userId]\n                    // Процесс завершился - удаляем id из массива.\n                    : usersState.followingInProgress.filter(id => id !== action.userId)\n            };\n        default:\n            return usersState;\n    }\n};\n\nexport default usersReducer;","import {createSelector} from \"reselect\";\n\n// Селектор это функция которая достает необходимые данные из state.\n// Это промежуточное звено между state и mapStateToProps, нужное для того что бы в случае изменений\n// у нас была одна точка корректировки.\n\nconst getUsersSelector = (state) => {\n    return state.usersState.users;\n};\n\n// Селектор с логикой (учебный) созданный при помощи библиотеки reselect.\n// Этот селектор запускается только тогда когда изменения в state касаются только его.\n// В остальных случаях он возвращает запомненное значения, не запуская при этом функцию.\n// Это помогает избежать лишней калькуляции, перерисовок и сложностей с отладкой.\nexport const getUsers = createSelector(getUsersSelector, (users) => {\n    return users.filter(user => true);\n})\n\nexport const getPageSize = (state) => {\n    return state.usersState.pageSize;\n};\n\nexport const getTotalUsersCount = (state) => {\n    return state.usersState.totalUsersCount;\n};\n\nexport const getCurrentPage = (state) => {\n    return state.usersState.currentPage;\n};\n\nexport const getIsFetching = (state) => {\n    return state.usersState.isFetching;\n};\n\nexport const getFollowingInProgress = (state) => {\n    return state.usersState.followingInProgress;\n};","import {connect} from \"react-redux\";\nimport React from \"react\";\nimport Users from \"./Users\";\nimport Preloader from \"../common/Preloader/Preloader\";\nimport {requestUsers, follow, unfollow} from \"../../redux/usersReducer\";\nimport {compose} from \"redux\";\nimport {\n    getCurrentPage,\n    getFollowingInProgress,\n    getIsFetching,\n    getPageSize,\n    getTotalUsersCount, getUsers\n} from \"../../redux/usersSelectors\";\n\n// Вторая контейнерная компонента которая делает AJAX-запросы и отрисовывает презентационную компоненту.\nclass UsersContainer extends React.Component {\n    // Этот метод вызывается сразу после вставки компоненты в DOM.\n    // Он отрисовывает ПЕРВУЮ страницу пользователей и передает в totalUsersCount их общее количество.\n    componentDidMount() {\n        const {pageSize, currentPage, requestUsers} = this.props;\n        requestUsers(currentPage, pageSize);\n    }\n\n    // Этот метод срабатывает на клик.\n    // Он изменяет currentPage и отрисовывает НУЖНУЮ НАМ страницу пользователей.\n    // На момент вызова этого AJAX пропсы еще не вернулись, поэтому используем pageNumber а не currentPage.\n    onPageChange = (pageNumber) => {\n        const {requestUsers, pageSize} = this.props;\n        requestUsers(pageNumber, pageSize);\n    }\n\n    render() {\n        const {\n            users, follow, unfollow, pageSize, totalUsersCount, currentPage,\n            isFetching, followingInProgress,\n        } = this.props;\n        return <>\n            {isFetching ? <Preloader/> : null}\n            <Users users={users} follow={follow} unfollow={unfollow} pageSize={pageSize}\n                   totalUsersCount={totalUsersCount} currentPage={currentPage} followingInProgress={followingInProgress}\n                   onPageChange={this.onPageChange}/>\n        </>\n    }\n}\n\n// Возвращает объект с данными из state которые будут переданы в презентационную компоненту в качестве пропсов.\nconst mapStateToProps = (state) => {\n    return {\n        users: getUsers(state),\n        pageSize: getPageSize(state),\n        totalUsersCount: getTotalUsersCount(state),\n        currentPage: getCurrentPage(state),\n        isFetching: getIsFetching(state),\n        followingInProgress: getFollowingInProgress(state),\n    }\n};\n\n// Объединение разных обработчиков функцией compose.\nexport default compose(\n    connect(mapStateToProps, {requestUsers, follow, unfollow}),\n)(UsersContainer);\n\n/*\nConnect создаёт контейнерную компоненту внутри которой отрисовывает другую компоненту и в виде пропсов передают в неё\nданные из объектов которые возвращаются двумя функциями. Когда происходят изменения, connect сам перерисовывает дерево.\n\nВместо функции mapDispatchToProps вторым параметром мы передаем объект. Connect сам приведет его к виду:\nfollow: (userId) => dispatch(followActionCreator(userId)).\nКак и в случае с mapStateToProps, колбэки будут переданы в презентационную компоненту в качестве пропсов.\n*/\n\n","export default __webpack_public_path__ + \"static/media/flag.5c2e6fb4.jpg\";","import css from \"./Header.module.css\";\nimport flag from \"./flag.jpg\";\nimport {NavLink} from \"react-router-dom\";\n\nconst Header = (props) => {\n    return (\n        <header className={css.header}>\n            <img src={flag} alt=\"Pirate flag\"/>\n            <div className={css.loginBlock}>\n                {props.isAuth\n                    ? <div>{props.login} <button onClick={props.logout}>Logout</button></div>\n                    : <NavLink to=\"/login\"><button>Login</button></NavLink>}\n            </div>\n        </header>\n    );\n};\n\nexport default Header;\n","import {authAPI} from \"../api/api\";\nimport {stopSubmit} from \"redux-form\";\n\n// Reducer принимает на вход state и action и возвращает измененный (на основании action) state.\n// Action это объект содержащий информацию о том что мы хотим изменить.\n\n// ACTION CREATORS:\nconst SER_AUTH_USER_DATA = 'pirateSocialNetwork/auth/SER_AUTH_USER_DATA';\nexport const setAuthUserData = (id, email, login, isAuth) => ({\n    type: SER_AUTH_USER_DATA,\n    data: {id, email, login, isAuth}\n});\n\n// THUNKS это функции которые сначала делают асинхронные операции, а потом диспатчат actions.\n// Необходимые параметры передаются при помощи замыкания.\nexport const getAuthUserData = () => async (dispatch) => {\n    const response = await authAPI.isIdentified();\n    // Если пользователь идентифицирован - записываем информацию о нем в authState.\n    if (response.resultCode === 0) {\n        const {id, email, login} = response.data;\n        dispatch(setAuthUserData(id, email, login, true));\n    }\n};\n\nexport const login = (email, password, rememberMe) => async (dispatch) => {\n    const response = await authAPI.login(email, password, rememberMe);\n    if (response.resultCode === 0) {\n        dispatch(getAuthUserData());\n    } else {\n        // stopSubmit() – это action-creator из библиотеки redux-form, позволяющий в случае несрабатывания формы\n        // отобразить ошибку. 1 параметр - название формы, 2 параметр - поле и текст ошибки.\n        // _error означает что ошибка будет не на конкретное поле, а на всю форму.\n        const message = response.messages.length > 0 ? response.messages[0] : 'Something went wrong';\n        dispatch(stopSubmit('login', {_error: message}));\n    }\n};\n\nexport const logout = () => async (dispatch) => {\n    const response = await authAPI.logout();\n    if (response.resultCode === 0) {\n        dispatch(setAuthUserData(null, null, null, false));\n    }\n};\n\nconst initialState = {\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false,\n};\n\nconst authReducer = (authState = initialState, action) => {\n    // В виду специфики работы react-redux, из редьюсера нужно возвращать не измененный state,\n    // а его копию с новыми изменениями. Глубоко копируем только то что собираемся менять.\n    switch (action.type) {\n        case SER_AUTH_USER_DATA:\n            return {\n                ...authState,\n                ...action.data,\n            }\n        default:\n            return authState;\n    }\n};\n\nexport default authReducer;","import React from \"react\";\nimport Header from \"./Header\";\nimport {connect} from \"react-redux\";\nimport {logout} from \"../../redux/authReducer\";\n\nclass HeaderContainer extends React.Component {\n    render() {\n        const {isAuth, login, logout} = this.props;\n        return (\n            <Header isAuth={isAuth} login={login} logout={logout}/>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    const {isAuth, login} = state.authState;\n    return {\n        isAuth: isAuth,\n        login: login,\n    }\n};\n\nexport default connect(mapStateToProps, {logout})(HeaderContainer);\n","import css from \"../common/FormControls/FormControls.module.css\";\nimport {reduxForm} from \"redux-form\";\nimport {createField, Input} from \"../common/FormControls/FormControls\";\nimport {required} from \"../../utils/validators/validators\";\nimport {connect} from \"react-redux\";\nimport {login} from \"../../redux/authReducer\";\nimport {Redirect} from \"react-router-dom\";\n\n// Field - контейнерная компонента рисующая другую компоненту. Внутри Field уже зашиты onChange, которые будут\n// брать данные и отправлять их в state. Атрибут name - то под каким именем данные уйдут на сервер.\nconst LoginForm = ({handleSubmit, error}) => {\n    // Дефолтное поведение кнопки в форме - сабмитить форму.\n    // В форму в виде пропсов приходит много методов. Пропсы прокидывает наша HOC-контейнерная компонента.\n    // Внутри handleSubmit вызовется onSubmit который мы передали в LoginReduxForm при отрисовке,\n    // а в него придут все собранные данные из формы.\n    return (\n        <form onSubmit={handleSubmit}>\n            {createField(\"Email\", \"email\", [required], Input)}\n            {createField(\"Password\", \"password\", [required], Input, {type: \"password\"})}\n            {createField(null, \"rememberMe\", null, Input, {type: \"checkbox\"}, \"Remember me\")}\n            {error && <div className={css.formSummaryError}>{error}</div>}\n            <div>\n                <button>Login</button>\n            </div>\n        </form>\n    );\n};\n\n// Форм будет много, поэтому каждой нужно своё уникальное имя (в данном случае - login)\n// В данном случае, LoginReduxForm является контейнерной компонентой над LoginForm.\n// Хоком через который будет осуществляться общение формы с редьюсером.\nconst LoginReduxForm = reduxForm({form: 'login'})(LoginForm);\n\n// При отрисовке нашей контейнерной формы нужно передать в неё \"родительский\" submit.\nconst Login = (props) => {\n    // В \"родительский\" submit приходят все данные из формы.\n    const onSubmit = (formData) => {\n        const {email, password, rememberMe} = formData;\n        props.login(email, password, rememberMe);\n    }\n\n    if (props.isAuth) {\n        return <Redirect to={'/profile'}/>\n    }\n\n    return (\n        <div>\n            <h1>Login</h1>\n            <LoginReduxForm onSubmit={onSubmit}/>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    isAuth: state.authState.isAuth\n});\n\n// Раньше по дефолту экспортировался Login, а сейчас экспортируется безымянная контейнерна компонента\n// которая образовалась с помощью хока connect.\nexport default connect(mapStateToProps, {login})(Login);","import {getAuthUserData} from \"./authReducer\";\n\n// Reducer принимает на вход state и action и возвращает измененный (на основании action) state.\n// Action это объект содержащий информацию о том что мы хотим изменить.\n\n// ACTION CREATORS:\nconst INITIALIZED_SUCCESS = 'pirateSocialNetwork/app/INITIALIZED_SUCCESS';\nexport const initializeSuccess = () => ({type: INITIALIZED_SUCCESS});\n\n// THUNKS это функции которые сначала делают асинхронные операции, а потом диспатчат actions.\n// Необходимые параметры передаются при помощи замыкания.\nexport const initializeApp = () => (dispatch) => {\n    let promise = dispatch(getAuthUserData());\n    // Когда выполнятся все промисы из массива (в данном случае он один), сработает then.\n    Promise.all([promise]).then(() => {\n        dispatch(initializeSuccess());\n    })\n};\n\nconst initialState = {\n    initialized: false,\n};\n\nconst appReducer = (appState = initialState, action) => {\n    // В виду специфики работы react-redux, из редьюсера нужно возвращать не измененный state,\n    // а его копию с новыми изменениями. Глубоко копируем только то что собираемся менять.\n    switch (action.type) {\n        case INITIALIZED_SUCCESS:\n            return {\n                ...appState,\n                initialized: true,\n            }\n        default:\n            return appState;\n    }\n};\n\nexport default appReducer;","import {applyMiddleware, combineReducers, compose} from \"redux\";\nimport profileReducer from \"./profileReducer\";\nimport dialogsReducer from \"./dialogsReducer\";\nimport usersReducer from \"./usersReducer\";\nimport authReducer from \"./authReducer\";\nimport thunkMiddleware from \"redux-thunk\";\nimport {reducer as formReducer} from 'redux-form';\nimport appReducer from \"./appReducer\";\n\nconst {createStore} = require(\"redux\");\n\n// Преобразуем объект с данными и редьюсерами в одну функцию.\nlet reducers = combineReducers({\n    profileState: profileReducer,\n    dialogsState: dialogsReducer,\n    usersState: usersReducer,\n    authState: authReducer,\n    appState: appReducer,\n    form: formReducer, // Reducer библиотеки redux-form (state должен называться именно form).\n});\n\n// При помощи созданной выше функции создаём store.\n// applyMiddleware - создание промежуточного слоя для использования thunks.\n// composeEnhancers - подключение браузерного расширения Redux DevTools Extension.\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\n\n// window.store = store;\nexport default store;","import React, {Suspense} from \"react\";\n\n// HOC-компонента принимает компонент и возвращает другой компонент.\n// Это один из способов для повторного использования одной и той же логики.\n\n// Оборачивает компоненту тегом <Suspense> для использования React.lazy.\nconst withSuspense = (Component) => {\n    return (props) => {\n        return <Suspense fallback={<div>Loading...</div>}>\n            <Component {...props}/>\n        </Suspense>\n    }\n}\n\nexport default withSuspense;","import './App.css';\nimport Navbar from './components/Navbar/Navbar';\nimport {BrowserRouter, Route, withRouter} from \"react-router-dom\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Settings\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport Login from \"./components/Login/Login\";\nimport React, {Component} from \"react\";\nimport {connect, Provider} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {initializeApp} from \"./redux/appReducer\";\nimport Preloader from \"./components/common/Preloader/Preloader\";\nimport store from \"./redux/reduxStore\";\nimport withSuspense from \"./hoc/withSuspense\";\n\n// Импорт при помощи React.lazy означает что этого модуля не будет в базовой загрузке.\n// Он будет загружен только когда потребуется.\n// Для работы в этом режиме, компонента должна находится внутри тега <Suspense>. Используем HOC withSuspense.\nconst ProfileContainer = React.lazy(() => import(\"./components/Profile/ProfileContainer\"));\nconst DialogsContainer = React.lazy(() => import(\"./components/Dialogs/DialogsContainer\"));\n\nclass App extends Component {\n    // Узнаем идентифицирован пользователь или нет.\n    componentDidMount() {\n        const {initializeApp} = this.props;\n        initializeApp();\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n\n        // Route следит за адресной строкой браузера и, в случае её совпадения с path, запускает render данных.\n        // \"?\" означает что параметр опциональный и <ProfileContainer/> будет рендериться и без него.\n        // :userId? - значение этого параметра придет в пропсы через withRouter.\n        return (\n            <div className='app-wrapper'>\n                <HeaderContainer/>\n                <Navbar/>\n                <div className='app-wrapper-content'>\n                    <Route path='/profile/:userId?' render={withSuspense(ProfileContainer)}/>\n                    <Route path='/dialogs' render={withSuspense(DialogsContainer)}/>\n                    <Route path='/users' render={() => <UsersContainer/>}/>\n                    <Route path='/news' render={() => <News/>}/>\n                    <Route path='/music' render={() => <Music/>}/>\n                    <Route path='/settings' render={() => <Settings/>}/>\n                    <Route path='/login' render={() => <Login/>}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    initialized: state.appState.initialized,\n})\n\n// При коннекте компонента с роутами нужно обернуть её в HOC withRouter (это баг).\nconst AppContainer = compose(\n    withRouter,\n    connect(mapStateToProps, {initializeApp}))(App);\n\nconst PiratesApp = () => {\n    // Для использования компоненты Route нужно обернуть код в котором она присутствует в BrowserRouter.\n    // Provider оборачивает основной компонент приложения и делает store доступным для дочерних компонент.\n    // basename - настройка позволяющая работать без ошибок в разных средах (при запуске в браузере у нас один URL,\n    // при деплое на github pages другой и т. д.)\n    return <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </BrowserRouter>\n}\n\nexport default PiratesApp;","import React from 'react';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport ReactDOM from 'react-dom';\nimport PiratesApp from \"./App\";\n\nReactDOM.render(<PiratesApp />, document.getElementById('root'));\n\n// Из-за React.StrictMode массив users отрисовывался 2 раза подряд.\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React from \"react\";\nimport css from \"./FormControls.module.css\"\nimport {Field} from \"redux-form\";\n\n// meta - внутренняя деструктуризация.\nconst FormControl = ({input, meta: {touched, error}, Formtype, ...props}) => { // rest-оператор\n    const hasError = touched && error;\n\n    return (\n        <div className={css.formControl + \" \" + (hasError ? css.error : \" \")}>\n            <div><Formtype {...input} {...props} /></div>\n            {hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\nexport const Input = (props) => {\n    return <FormControl {...props} Formtype='input'/>\n}\n\nexport const Textarea = (props) => {\n    return <FormControl {...props} Formtype='textarea'/>\n}\n\nexport const createField = (placeholder, name, validate, component, props = {}, text = \"\") => (\n    <div><Field placeholder={placeholder} name={name} validate={validate} component={component} {...props}/>{text}</div>\n)\n\n// && - the operator returns the value of the first falsy operand encountered when evaluating from left to right,\n// or the value of the last operand if they are all truthy.","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__2axsW\",\"error\":\"FormControls_error__24y5C\",\"formSummaryError\":\"FormControls_formSummaryError__kXbFS\"};","export default __webpack_public_path__ + \"static/media/preloader.6121396b.svg\";","import preloader from \"../../../assets/images/preloader.svg\";\nimport React from \"react\";\n\nconst Preloader = () => {\n    return (\n        <div>\n            <img src={preloader} alt=\"Loading wheel\"/>\n        </div>\n    )\n}\n\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__18P4_\",\"selectedPage\":\"Paginator_selectedPage__3SIki\",\"pageNumber\":\"Paginator_pageNumber__xOsKi\"};","export const required = (value) => {\n    if (value) return undefined;\n    return \"Field is required\";\n}\n\n// Замыкание - функция вызывает другую функцию и эта внутренняя функция получает доступ к данным из внешней.\n// Мы вызываем maxLengthCreator, передаем в него значение и он возвращает нам функцию валидатор с этим значением внутри.\nexport const maxLengthCreator = (maxLength) => (value) => {\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\n    return undefined;\n}\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\",\"loginBlock\":\"Header_loginBlock__6mma5\"};","import {profileAPI} from \"../api/api\";\n\n// Reducer принимает на вход state и action и возвращает измененный (на основании action) state.\n// Action это объект содержащий информацию о том что мы хотим изменить.\n\n// ACTION CREATORS:\nconst ADD_NEW_POST = 'pirateSocialNetwork/profile/ADD-NEW-POST';\nexport const addNewPost = (newPostText) => ({type: ADD_NEW_POST, newPostText});\n\nconst SET_USER_PROFILE = 'pirateSocialNetwork/profile/SET_USER_PROFILE';\nexport const setUserProfile = (profile) => ({type: SET_USER_PROFILE, profile});\n\nconst SET_USER_STATUS = 'pirateSocialNetwork/profile/SET_USER_STATUS';\nexport const setUserStatus = (newStatus) => ({type: SET_USER_STATUS, newStatus});\n\nconst DELETE_POST = 'pirateSocialNetwork/profile/DELETE_POST';\nexport const deletePost = (postId) => ({type: DELETE_POST, postId});\n\n// THUNKS это функции которые сначала делают асинхронные операции, а потом диспатчат actions.\n// Необходимые параметры передаются при помощи замыкания.\nexport const getUserProfile = (userId) => async (dispatch) => {\n    const response = await profileAPI.getUserProfile(userId);\n    dispatch(setUserProfile(response));\n};\n\nexport const getUserStatus = (userId) => async (dispatch) => {\n    const response = await profileAPI.getUserStatus(userId);\n    dispatch(setUserStatus(response));\n};\n\nexport const updateUserStatus = (status) => async (dispatch) => {\n    const response = await profileAPI.updateUserStatus(status);\n    if (response.resultCode === 0) {\n        dispatch(setUserStatus(status));\n    }\n};\n\nconst initialProfileState = {\n    posts: [\n        {id: 1, message: 'Aboard!', likesCount: 12},\n        {id: 2, message: 'I am not fat i\\'m big boned!', likesCount: 2},\n        {id: 3, message: 'Stay away from my gold!', likesCount: 0},\n        {id: 4, message: 'LFM Tank to Deadmines last slot', likesCount: 8},\n    ],\n    profile: null,\n    status: '',\n};\n\nconst profileReducer = (profileState = initialProfileState, action) => {\n    // В виду специфики работы react-redux, из редьюсера нужно возвращать не измененный state,\n    // а его копию с новыми изменениями. Глубоко копируем только то что собираемся менять.\n    switch (action.type) {\n        case ADD_NEW_POST:\n            const newPost = {id: 5, message: action.newPostText, likesCount: 0};\n            return {\n                ...profileState,\n                posts: [...profileState.posts, newPost],\n            };\n        case SET_USER_PROFILE:\n            return {\n                ...profileState,\n                profile: action.profile,\n            };\n        case SET_USER_STATUS:\n            return {\n                ...profileState,\n                status: action.newStatus,\n            };\n        case DELETE_POST:\n            return {\n                ...profileState,\n                posts: [...profileState.posts.filter(post => post.id !== action.postId)],\n            };\n        default:\n            return profileState;\n    }\n};\n\nexport default profileReducer;","export default __webpack_public_path__ + \"static/media/common_avatar.7e3312d9.jpg\";"],"sourceRoot":""}