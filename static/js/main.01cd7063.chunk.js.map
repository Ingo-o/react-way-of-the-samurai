{"version":3,"sources":["api/api.js","redux/dialogsReducer.js","components/Users/User.module.css","components/Navbar/Navbar.module.css","components/common/FormControls/FormControls.js","reportWebVitals.js","components/Navbar/Navbar.jsx","components/News/News.jsx","components/Music/Music.jsx","components/Settings/Settings.jsx","components/common/Paginator/Paginator.jsx","components/Users/User.jsx","components/Users/Users.jsx","utils/objects-helpers.js","redux/usersReducer.js","redux/usersSelectors.js","components/Users/UsersContainer.jsx","components/Header/flag.jpg","components/Header/Header.jsx","redux/authReducer.js","components/Header/HeaderContainer.jsx","components/Login/Login.jsx","redux/appReducer.js","redux/reduxStore.js","hoc/withSuspense.js","App.js","index.js","components/common/FormControls/FormControls.module.css","utils/validators.js","assets/images/preloader.svg","components/common/Preloader/Preloader.jsx","components/common/Paginator/Paginator.module.css","components/Header/Header.module.css","redux/profileReducer.js","assets/images/common_avatar.jpg"],"names":["instance","axios","create","baseURL","withCredentials","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userId","post","unfollow","delete","profileAPI","getUserProfile","getUserStatus","updateUserStatus","status","put","savePhoto","file","formData","FormData","append","saveProfile","profileData","authAPI","isIdentified","login","email","password","rememberMe","captcha","logout","securityAPI","getCaptchaURL","SEND_MESSAGE","sendMessage","newMessageText","type","initialDialogsState","dialogs","id","name","messages","message","dialogsReducer","dialogsState","action","newMessage","module","exports","FormControl","input","meta","touched","error","Formtype","props","hasError","className","css","formControl","Input","Textarea","createField","placeholder","validate","component","text","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Navbar","nav","item","to","activeClassName","active","News","Music","Settings","Paginator","totalItemsCount","onPageChange","portionSize","pagesCount","Math","ceil","pages","i","push","portionsCount","useState","portionNumber","setPortionNumber","leftBorderOfThePortion","rightBorderOfThePortion","paginator","onClick","filter","page","map","classNames","selectedPage","pageNumber","e","User","user","followingInProgress","src","photos","small","common_avatar","alt","userAvatar","followed","disabled","some","Users","users","totalUsersCount","newPropsForObjectInArray","array","propValue","objPropName","newObjProps","FOLLOW_SUCCESS","followSuccess","UNFOLLOW_SUCCESS","unfollowSuccess","SET_USERS","SET_CURRENT_PAGE","setCurrentPage","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","toggleIsFetching","isFetching","TOGGLE_FOLLOWING_PROGRESS","toggleFollowingProgress","followUnfollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","initialUsersState","usersReducer","usersState","createSelector","state","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","requestUsers","this","Preloader","React","Component","compose","connect","items","totalCount","bind","Header","header","flag","loginBlock","isAuth","SET_AUTH_USER_DATA","setAuthUserData","SET_CAPTCHA_URL","setCaptchaURL","captchaURL","getAuthUserData","url","initialState","authReducer","authState","HeaderContainer","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","required","formSummaryError","length","stopSubmit","_error","INITIALIZED_SUCCESS","initialized","appReducer","appState","store","createStore","require","combineReducers","profileState","profileReducer","formReducer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","applyMiddleware","thunkMiddleware","withSuspense","fallback","ProfileContainer","lazy","DialogsContainer","App","catchAllUnhandledErrors","reason","promise","initializeApp","addEventListener","removeEventListener","exact","path","render","AppContainer","withRouter","Promise","all","PiratesApp","ReactDOM","document","getElementById","value","maxLengthCreator","maxLength","preloader","ADD_NEW_POST","addNewPost","newPostText","SET_USER_PROFILE","SET_USER_STATUS","setUserStatus","newStatus","DELETE_POST","SAVE_PHOTO_SUCCESS","profile","getState","reject","initialProfileState","posts","likesCount","newPost","postId"],"mappings":"2IAAA,qJAGMA,EAHN,OAGiBC,EAAMC,OAAO,CAE1BC,QAAS,gDAETC,iBAAiB,EAEjBC,QAAS,CAAC,UAAW,0CAGZC,EAAW,CACpBC,SADoB,SACXC,EAAaC,GAClB,OAAOT,EAASU,IAAT,qBAA2BF,EAA3B,kBAAgDC,IAClDE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAEnCC,OALoB,SAKbC,GACH,OAAOf,EAASgB,KAAT,iBAAwBD,IAC1BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAEnCI,SAToB,SASXF,GACL,OAAOf,EAASkB,OAAT,iBAA0BH,IAC5BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAI1BM,EAAa,CACtBC,eADsB,SACPL,GACX,OAAOf,EAASU,IAAT,kBAAwBK,IAC1BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAEnCQ,cALsB,SAKRN,GACV,OAAOf,EAASU,IAAT,yBAA+BK,IACjCJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAEnCS,iBATsB,SASLC,GACb,OAAOvB,EAASwB,IAAT,iBAA+B,CAACD,OAAQA,IAC1CZ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAEnCY,UAbsB,SAaZC,GAEN,IAAMC,EAAW,IAAIC,SAErB,OADAD,EAASE,OAAO,QAASH,GAClB1B,EAASwB,IAAT,gBAA8BG,EAAU,CAC3CtB,QAAS,CACL,eAAgB,yBAErBM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAEjCiB,YAvBsB,SAuBVC,GACR,OAAO/B,EAASwB,IAAT,UAAwBO,GAC1BpB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAI1BmB,EAAU,CACnBC,aADmB,WAEf,OAAOjC,EAASU,IAAT,WACFC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAEnCqB,MALmB,SAKbC,EAAOC,GAA+C,IAArCC,EAAoC,wDAAhBC,EAAgB,uDAAN,KACjD,OAAOtC,EAASgB,KAAT,aAA4B,CAACmB,QAAOC,WAAUC,aAAYC,YAC5D3B,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAEnC0B,OATmB,WAUf,OAAOvC,EAASkB,OAAT,cACFP,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAI1B2B,EAAc,CACvBC,cADuB,WAEnB,OAAOzC,EAASU,IAAT,4BACFC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,W,sFCtEjC6B,EAAe,2CACRC,EAAc,SAACC,GAAD,MAAqB,CAACC,KAAMH,EAAcE,mBAE/DE,EAAsB,CACxBC,QAAS,CACL,CAACC,GAAI,EAAGC,KAAM,mBACd,CAACD,GAAI,EAAGC,KAAM,eACd,CAACD,GAAI,EAAGC,KAAM,wBACd,CAACD,GAAI,EAAGC,KAAM,aACd,CAACD,GAAI,EAAGC,KAAM,yBACd,CAACD,GAAI,EAAGC,KAAM,gBAElBC,SAAU,CACN,CAACF,GAAI,EAAGG,QAAS,oBACjB,CAACH,GAAI,EAAGG,QAAS,YACjB,CAACH,GAAI,EAAGG,QAAS,uEACjB,CAACH,GAAI,EAAGG,QAAS,yBAmBVC,IAfQ,WAAiD,IAAhDC,EAA+C,uDAAhCP,EAAqBQ,EAAW,uCAGnE,GAAQA,EAAOT,OACNH,EAAL,CACI,IAAMa,EAAa,CAACP,GAAI,EAAGG,QAASG,EAAOV,gBAC3C,OAAO,2BACAS,GADP,IAEIH,SAAS,GAAD,mBAAMG,EAAaH,UAAnB,CAA6BK,MAGzC,OAAOF,I,oBClCnBG,EAAOC,QAAU,CAAC,WAAa,2B,iICA/BD,EAAOC,QAAU,CAAC,IAAM,oBAAoB,KAAO,qBAAqB,OAAS,yB,+NCI3EC,EAAc,SAAC,GAAyD,IAAxDC,EAAuD,EAAvDA,MAAuD,IAAhDC,KAAOC,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,MAAQC,EAAwB,EAAxBA,SAAaC,EAAW,iBACnEC,EAAWJ,GAAWC,EAI5B,OACI,sBAAKI,UAAWC,IAAIC,YAAc,KAAOH,EAAWE,IAAIL,MAAQ,KAAhE,UACI,8BAAK,cAACC,EAAD,2BAAcJ,GAAWK,MAC7BC,GAAY,+BAAOH,QAKnBO,EAAQ,SAACL,GAClB,OAAO,cAACN,EAAD,2BAAiBM,GAAjB,IAAwBD,SAAS,YAG/BO,EAAW,SAACN,GACrB,OAAO,cAACN,EAAD,2BAAiBM,GAAjB,IAAwBD,SAAS,eAG/BQ,EAAc,SAACC,EAAavB,EAAMwB,EAAUC,GAA9B,IAAyCV,EAAzC,uDAAiD,GAAIW,EAArD,uDAA4D,GAA5D,OACvB,gCAAK,cAAC,IAAD,aAAOH,YAAaA,EAAavB,KAAMA,EAAMwB,SAAUA,EAAUC,UAAWA,GAAeV,IAASW,O,4DCf9FC,G,OAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBnE,MAAK,YAAkD,IAA/CoE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,Q,0FCsBCO,EA1BA,WAEX,OACI,sBAAKlB,UAAWC,IAAIkB,IAApB,UACI,qBAAKnB,UAAWC,IAAImB,KAApB,SACI,cAAC,IAAD,CAASC,GAAG,WAAWC,gBAAiBrB,IAAIsB,OAA5C,uBAEJ,qBAAKvB,UAAWC,IAAImB,KAApB,SACI,cAAC,IAAD,CAASC,GAAG,WAAWC,gBAAiBrB,IAAIsB,OAA5C,uBAEJ,qBAAKvB,UAAWC,IAAImB,KAApB,SACI,cAAC,IAAD,CAASC,GAAG,SAASC,gBAAiBrB,IAAIsB,OAA1C,qBAEJ,qBAAKvB,UAAWC,IAAImB,KAApB,SACI,cAAC,IAAD,CAASC,GAAG,QAAQC,gBAAiBrB,IAAIsB,OAAzC,oBAEJ,qBAAKvB,UAAWC,IAAImB,KAApB,SACI,cAAC,IAAD,CAASC,GAAG,SAASC,gBAAiBrB,IAAIsB,OAA1C,qBAEJ,qBAAKvB,UAAWC,IAAImB,KAApB,SACI,cAAC,IAAD,CAASC,GAAG,YAAYC,gBAAiBrB,IAAIsB,OAA7C,4B,QCbDC,G,OARF,WACT,OACI,yCCMOC,G,OARD,WACV,OACI,0CCMOC,G,OARE,WACb,OACI,6C,2DCmCOC,EAnCG,SAAC,GAIf,IAJ6F,IAA7EpF,EAA4E,EAA5EA,SAAUqF,EAAkE,EAAlEA,gBAAiBtF,EAAiD,EAAjDA,YAAauF,EAAoC,EAApCA,aAAoC,IAAtBC,mBAAsB,MAAR,GAAQ,EAEtFC,EAAaC,KAAKC,KAAKL,EAAkBrF,GACzC2F,EAAQ,GACLC,EAAI,EAAGA,GAAKJ,EAAYI,GAAK,EAClCD,EAAME,KAAKD,GAGf,IAAME,EAAgBL,KAAKC,KAAKF,EAAaD,GAK7C,EAA0CQ,mBAAS,GAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KAEMC,GAA0BF,EAAgB,GAAKT,EAAc,EAC7DY,EAA0BH,EAAgBT,EAEhD,OACI,sBAAK9B,UAAWC,IAAI0C,UAApB,UACKJ,EAAgB,GAAK,wBAAQK,QAAS,kBAAMJ,EAAiBD,EAAgB,IAAxD,sBAIlBL,EACKW,QAAO,SAAAC,GAAI,OAAIA,GAAQL,GAA0BK,GAAQJ,KACzDK,KAAI,SAAAD,GAAI,OAAI,sBACT9C,UAAWgD,IAAW,eAAE/C,IAAIgD,aAAe3G,IAAgBwG,GAAO7C,IAAIiD,YACtEN,QAAS,SAACO,GAAD,OAAOtB,EAAaiB,IAFpB,SAEuCA,GAAPA,MAEpDP,EAAgBF,GAAiB,wBAAQO,QAAS,kBAAMJ,EAAiBD,EAAgB,IAAxD,sB,0BCA/Ba,EA7BF,SAAC,GAAmD,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,oBAAqB1G,EAAsB,EAAtBA,OAAQG,EAAc,EAAdA,SAC9C,OACI,gCACI,iCACI,8BACI,cAAC,IAAD,CAASsE,GAAI,YAAcgC,EAAKvE,GAAhC,SACI,qBAAKyE,IAA2B,OAAtBF,EAAKG,OAAOC,MAAiBJ,EAAKG,OAAOC,MAAQC,IACtDC,IAAI,SAAS3D,UAAWC,IAAI2D,iBAGzC,8BACKP,EAAKQ,SAEA,wBAAQC,SAAUR,EAAoBS,MAAK,SAAAjF,GAAE,OAAIA,IAAOuE,EAAKvE,MACrD8D,QAAS,kBAAM7F,EAASsG,EAAKvE,KADrC,sBAEA,wBAAQgF,SAAUR,EAAoBS,MAAK,SAAAjF,GAAE,OAAIA,IAAOuE,EAAKvE,MACrD8D,QAAS,kBAAMhG,EAAOyG,EAAKvE,KADnC,yBAKd,+BACI,iCACI,8BAAMuE,EAAKtE,OACX,8BAAMsE,EAAKhG,kBCAhB2G,EAxBD,SAAC,GAKO,IAJHpH,EAIE,EAJFA,OAAQG,EAIN,EAJMA,SAAUkH,EAIhB,EAJgBA,MAClB1H,EAGE,EAHFA,SAAU2H,EAGR,EAHQA,gBACV5H,EAEE,EAFFA,YAAauF,EAEX,EAFWA,aACbyB,EACE,EADFA,oBAGf,OACI,gCACI,cAAC,EAAD,CAAWhH,YAAaA,EACbuF,aAAcA,EACdD,gBAAiBsC,EACjB3H,SAAUA,IACrB,8BACK0H,EAAMlB,KAAI,SAAAM,GAAI,OAAI,cAAC,EAAD,CAAMA,KAAMA,EAENzG,OAAQA,EACRG,SAAUA,EACVuG,oBAAqBA,GAHhBD,EAAKvE,a,uDCnBtCqF,EAA2B,SAACC,EAAOC,EAAWC,EAAaC,GACpE,OAAOH,EAAMrB,KAAI,SAAA3B,GACb,OAAIA,EAAKkD,KAAiBD,EACf,2BAAIjD,GAASmD,GAEjBnD,MCEToD,EAAiB,2CACVC,EAAgB,SAAC5H,GAAD,MAAa,CAAC8B,KAAM6F,EAAgB3H,WAE3D6H,EAAmB,6CACZC,EAAkB,SAAC9H,GAAD,MAAa,CAAC8B,KAAM+F,EAAkB7H,WAE/D+H,EAAY,sCAGZC,EAAmB,6CACZC,EAAiB,SAACxI,GAAD,MAAkB,CAACqC,KAAMkG,EAAkBvI,gBAEnEyI,EAAwB,kDAGxBC,EAAqB,+CACdC,EAAmB,SAACC,GAAD,MAAiB,CAACvG,KAAMqG,EAAoBE,eAEtEC,EAA4B,sDACrBC,EAA0B,SAAC9B,EAAqBzG,GAAtB,MAAkC,CACrE8B,KAAMwG,EAA2B7B,sBAAqBzG,WAepDwI,GAAkB,uCAAG,WAAOC,EAAUzI,EAAQ0I,EAAWC,GAApC,SAAAC,EAAA,6DACvBH,EAASF,GAAwB,EAAMvI,IADhB,SAEJ0I,EAAU1I,GAFN,OAGC,IAHD,OAGd6I,YACLJ,EAASE,EAAc3I,IAE3ByI,EAASF,GAAwB,EAAOvI,IANjB,2CAAH,4DAiBlB8I,GAAoB,CACtB1B,MAAO,GACP1H,SAAU,GACV2H,gBAAiB,EACjB5H,YAAa,EACb4I,YAAY,EACZ5B,oBAAqB,IAuCVsC,GApCM,WAA6C,IAA5CC,EAA2C,uDAA9BF,GAAmBvG,EAAW,uCAG7D,OAAQA,EAAOT,MACX,KAAK6F,EACD,OAAO,2BACAqB,GADP,IAEI5B,MAAOE,EAAyB0B,EAAW5B,MAAO7E,EAAOvC,OAAQ,KAAM,CAACgH,UAAU,MAE1F,KAAKa,EACD,OAAO,2BACAmB,GADP,IAEI5B,MAAOE,EAAyB0B,EAAW5B,MAAO7E,EAAOvC,OAAQ,KAAM,CAACgH,UAAU,MAE1F,KAAKe,EACD,OAAO,2BAAIiB,GAAX,IAAuB5B,MAAO7E,EAAO6E,QACzC,KAAKY,EACD,OAAO,2BAAIgB,GAAX,IAAuBvJ,YAAa8C,EAAO9C,cAC/C,KAAKyI,EACD,OAAO,2BAAIc,GAAX,IAAuB3B,gBAAiB9E,EAAO8E,kBACnD,KAAKc,EACD,OAAO,2BAAIa,GAAX,IAAuBX,WAAY9F,EAAO8F,aAC9C,KAAKC,EACD,OAAO,2BACAU,GADP,IAEIvC,oBAAqBlE,EAAOkE,oBAAP,sBAEXuC,EAAWvC,qBAFA,CAEqBlE,EAAOvC,SAE3CgJ,EAAWvC,oBAAoBT,QAAO,SAAA/D,GAAE,OAAIA,IAAOM,EAAOvC,YAExE,QACI,OAAOgJ,I,mBCvFNxJ,GAAWyJ,cARC,SAACC,GACtB,OAAOA,EAAMF,WAAW5B,SAO6B,SAACA,GACtD,OAAOA,EAAMpB,QAAO,SAAAQ,GAAI,OAAI,QAGnB2C,GAAc,SAACD,GACxB,OAAOA,EAAMF,WAAWtJ,UAGf0J,GAAqB,SAACF,GAC/B,OAAOA,EAAMF,WAAW3B,iBAGfgC,GAAiB,SAACH,GAC3B,OAAOA,EAAMF,WAAWvJ,aAGf6J,GAAgB,SAACJ,GAC1B,OAAOA,EAAMF,WAAWX,YAGfkB,GAAyB,SAACL,GACnC,OAAOA,EAAMF,WAAWvC,qBCnBtB+C,G,4MAWFxE,aAAe,SAACqB,GACZ,EAAKpD,MAAMwG,aAAapD,EAAY,EAAKpD,MAAMvD,W,uDARnD,WACIgK,KAAKzG,MAAMwG,aAAaC,KAAKzG,MAAMxD,YAAaiK,KAAKzG,MAAMvD,Y,oBAU/D,WACI,MAGIgK,KAAKzG,MAFLmE,EADJ,EACIA,MAAOrH,EADX,EACWA,OAAQG,EADnB,EACmBA,SAAUR,EAD7B,EAC6BA,SAAU2H,EADvC,EACuCA,gBAAiB5H,EADxD,EACwDA,YACpD4I,EAFJ,EAEIA,WAAY5B,EAFhB,EAEgBA,oBAEhB,OAAO,qCACF4B,EAAa,cAACsB,EAAA,EAAD,IAAe,KAC7B,cAAC,EAAD,CAAOvC,MAAOA,EAAOrH,OAAQA,EAAQG,SAAUA,EAAUR,SAAUA,EAC5D2H,gBAAiBA,EAAiB5H,YAAaA,EAAagH,oBAAqBA,EACjFzB,aAAc0E,KAAK1E,sB,GAxBT4E,IAAMC,WA0CpBC,sBACXC,aAboB,SAACb,GACrB,MAAO,CACH9B,MAAO5H,GAAS0J,GAChBxJ,SAAUyJ,GAAYD,GACtB7B,gBAAiB+B,GAAmBF,GACpCzJ,YAAa4J,GAAeH,GAC5Bb,WAAYiB,GAAcJ,GAC1BzC,oBAAqB8C,GAAuBL,MAMvB,CAACO,aF1BF,SAAChK,EAAaC,GAAd,8CAA2B,WAAO+I,GAAP,eAAAG,EAAA,6DACnDH,EAASL,GAAiB,IAC1BK,EAASR,EAAexI,IAF2B,SAGhCF,IAASC,SAASC,EAAaC,GAHC,OAG7CI,EAH6C,OAInD2I,EAASL,GAAiB,IAC1BK,GAvBqBrB,EAuBHtH,EAAKkK,MAvBS,CAAClI,KAAMiG,EAAWX,WAwBlDqB,GAlB+BpB,EAkBHvH,EAAKmK,WAlBmB,CAACnI,KAAMoG,EAAuBb,qBAY/B,iCAZrB,IAACA,EANVD,IAkB8B,OAA3B,uDE0BgBrH,OFPtB,SAACC,GAAD,8CAAY,WAAOyI,GAAP,SAAAG,EAAA,sEACxBJ,GAAmBC,EAAUzI,EAAQT,IAASQ,OAAOmK,KAAK3K,KAAWqI,GAD7C,2CAAZ,uDEO8B1H,SFH5B,SAACF,GAAD,8CAAY,WAAOyI,GAAP,SAAAG,EAAA,sEAC1BJ,GAAmBC,EAAUzI,EAAQT,IAASW,SAASgK,KAAK3K,KAAWuI,GAD7C,2CAAZ,yDEETgC,CAEbN,I,oBC3Da,OAA0B,iCCiB1BW,GAbA,SAAClH,GACZ,OACI,yBAAQE,UAAWC,KAAIgH,OAAvB,UACI,qBAAK1D,IAAK2D,GAAMvD,IAAI,gBACpB,qBAAK3D,UAAWC,KAAIkH,WAApB,SACKrH,EAAMsH,OACD,gCAAMtH,EAAM9B,MAAZ,IAAmB,wBAAQ4E,QAAS9C,EAAMzB,OAAvB,uBACnB,cAAC,IAAD,CAASgD,GAAG,SAAZ,SAAqB,mD,SCJrCgG,GAAqB,8CACdC,GAAkB,SAACxI,EAAIb,EAAOD,EAAOoJ,GAAnB,MAA+B,CAC1DzI,KAAM0I,GACN1K,KAAM,CAACmC,KAAIb,QAAOD,QAAOoJ,YAGvBG,GAAkB,2CACXC,GAAgB,SAACC,GAAD,MAAiB,CAC1C9I,KAAM4I,GACN5K,KAAM,CAAC8K,gBAKEC,GAAkB,yDAAM,WAAOpC,GAAP,uBAAAG,EAAA,sEACV3H,IAAQC,eADE,OAGL,KAFtBrB,EAD2B,QAGpBgJ,aAAmB,EACDhJ,EAASC,KAA7BmC,EADoB,EACpBA,GAAIb,EADgB,EAChBA,MAAOD,EADS,EACTA,MAClBsH,EAASgC,GAAgBxI,EAAIb,EAAOD,GAAO,KALd,2CAAN,uDA0BlBO,GAAgB,yDAAM,WAAO+G,GAAP,iBAAAG,EAAA,sEACRnH,IAAYC,gBADJ,OACzB7B,EADyB,OAEzB+K,EAAa/K,EAASiL,IAC5BrC,EAASkC,GAAcC,IAHQ,2CAAN,uDAavBG,GAAe,CACjB9I,GAAI,KACJb,MAAO,KACPD,MAAO,KACPoJ,QAAQ,EACRK,WAAY,MAkBDI,GAfK,WAAuC,IAAtCC,EAAqC,uDAAzBF,GAAcxI,EAAW,uCAGtD,OAAQA,EAAOT,MACX,KAAK0I,GACL,KAAKE,GACD,OAAO,2BACAO,GACA1I,EAAOzC,MAElB,QACI,OAAOmL,IC1EbC,G,4JACF,WACI,OACI,cAAC,GAAD,CAAQX,OAAQb,KAAKzG,MAAMsH,OAAQpJ,MAAOuI,KAAKzG,MAAM9B,MAAOK,OAAQkI,KAAKzG,MAAMzB,a,GAH7DoI,IAAMC,WAerBE,gBAPS,SAACb,GACrB,MAAO,CACHqB,OAAQrB,EAAM+B,UAAUV,OACxBpJ,MAAO+H,EAAM+B,UAAU9J,SAIS,CAACK,ODiCnB,yDAAM,WAAOiH,GAAP,SAAAG,EAAA,sEACD3H,IAAQO,SADP,OAEI,IAFJ,OAEXqH,YACTJ,EAASgC,GAAgB,KAAM,KAAM,MAAM,IAHvB,2CAAN,wDCjCPV,CAAmCmB,I,gDCe5CC,GAAiBC,aAAU,CAACC,KAAM,SAAjBD,EAxBL,SAAC,GAAuC,IAAtCE,EAAqC,EAArCA,aAAcvI,EAAuB,EAAvBA,MAAO6H,EAAgB,EAAhBA,WAKrC,OACI,uBAAMW,SAAUD,EAAhB,UACK9H,aAAY,QAAS,QAAS,CAACgI,MAAWlI,MAC1CE,aAAY,WAAY,WAAY,CAACgI,MAAWlI,KAAO,CAACxB,KAAM,aAC9D0B,aAAY,KAAM,aAAc,KAAMF,KAAO,CAACxB,KAAM,YAAa,eACjEiB,GAAS,qBAAKI,UAAWC,KAAIqI,iBAApB,SAAuC1I,IAEhD6H,GAAc,qBAAKlE,IAAKkE,EAAY9D,IAAK,YACzC8D,GAAcpH,aAAY,qBAAsB,UAAW,CAACgI,MAAWlI,MAExE,8BACI,mDAmCDyG,gBANS,SAACb,GAAD,MAAY,CAChCqB,OAAQrB,EAAM+B,UAAUV,OACxBK,WAAY1B,EAAM+B,UAAUL,cAIQ,CAACzJ,MFhCpB,SAACC,EAAOC,EAAUC,EAAYC,GAA9B,8CAA0C,WAAOkH,GAAP,iBAAAG,EAAA,sEACpC3H,IAAQE,MAAMC,EAAOC,EAAUC,EAAYC,GADP,OAE/B,KADtB1B,EADqD,QAE9CgJ,WAETJ,EAASoC,OAEmB,KAAxBhL,EAASgJ,YACTJ,EAAS/G,MAKPU,EAAUvC,EAASsC,SAASuJ,OAAS,EAAI7L,EAASsC,SAAS,GAAK,uBACtEsG,EAASkD,aAAW,QAAS,CAACC,OAAQxJ,MAbiB,2CAA1C,wDEgCN2H,EAxBD,SAAC9G,GAMX,OAAIA,EAAMsH,OACC,cAAC,IAAD,CAAU/F,GAAI,aAIrB,gCACI,uCACA,cAAC2G,GAAD,CAAgBI,SAXP,SAAC3K,GACdqC,EAAM9B,MAAMP,EAASQ,MAAOR,EAASS,SAAUT,EAASU,WAAYV,EAASW,UAUrCqJ,WAAY3H,EAAM2H,mBC7C5DiB,GAAsB,8CAatBd,GAAe,CACjBe,aAAa,GAiBFC,GAdI,WAAsC,IAArCC,EAAoC,uDAAzBjB,GAAcxI,EAAW,uCAGpD,OAAQA,EAAOT,OACN+J,GACM,2BACAG,GADP,IAEIF,aAAa,IAGVE,G,uCCLJC,IAHDC,EAhBQC,EAAQ,IAAvBD,aAGQE,2BAAgB,CAC3BC,aAAcC,KACdhK,aAAcD,KACd2G,WAAYD,GACZkC,UAAWD,GACXgB,SAAUD,GACVV,KAAMkB,QAMeC,OAAOC,sCAAwC3C,YACnB4C,2BAAgBC,QCXtDC,GARM,SAAC/C,GAClB,OAAO,SAAC5G,GACJ,OAAO,cAAC,WAAD,CAAU4J,SAAU,6CAApB,SACH,cAAChD,EAAD,eAAe5G,QCWrB6J,GAAmBlD,IAAMmD,MAAK,kBAAM,iCACpCC,GAAmBpD,IAAMmD,MAAK,kBAAM,iCAEpCE,G,4MACFC,wBAA0B,SAACC,EAAQC,K,uDAKnC,WACI1D,KAAKzG,MAAMoK,gBACXb,OAAOc,iBAAiB,qBAAsB5D,KAAKwD,2B,kCAIvD,WACIV,OAAOe,oBAAoB,qBAAsB7D,KAAKwD,2B,oBAG1D,WACI,OAAKxD,KAAKzG,MAAM6I,YAWZ,sBAAK3I,UAAU,cAAf,UACI,cAAC,GAAD,IACA,cAAC,EAAD,IACA,qBAAKA,UAAU,sBAAf,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOqK,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,cAAC,IAAD,CAAUlJ,GAAI,gBAClD,cAAC,IAAD,CAAOiJ,KAAK,oBAAoBC,OAAQd,GAAaE,MACrD,cAAC,IAAD,CAAOW,KAAK,WAAWC,OAAQd,GAAaI,MAC5C,cAAC,IAAD,CAAOS,KAAK,SAASC,OAAQ,kBAAM,cAAC,GAAD,OACnC,cAAC,IAAD,CAAOD,KAAK,QAAQC,OAAQ,kBAAM,cAAC,EAAD,OAClC,cAAC,IAAD,CAAOD,KAAK,SAASC,OAAQ,kBAAM,cAAC,EAAD,OACnC,cAAC,IAAD,CAAOD,KAAK,YAAYC,OAAQ,kBAAM,cAAC,EAAD,OACtC,cAAC,IAAD,CAAOD,KAAK,SAASC,OAAQ,kBAAM,cAAC,GAAD,OACnC,cAAC,IAAD,CAAOD,KAAK,IAAIC,OAAQ,kBAAM,2DAvBnC,cAAC/D,EAAA,EAAD,Q,GAlBDE,aAsDZ8D,GAAe7D,mBACjB8D,IACA7D,aAPoB,SAACb,GAAD,MAAY,CAChC4C,YAAa5C,EAAM8C,SAASF,eAMH,CAACuB,cHpED,kBAAM,SAAC5E,GAChC,IAAI2E,EAAU3E,EAASoC,MAEvBgD,QAAQC,IAAI,CAACV,IAAUxN,MAAK,WACxB6I,EARgC,CAAC3G,KAAM+J,YGsE1B/B,CAE0BmD,IAehCc,GAbI,WAGf,OAAO,cAAC,IAAD,UACH,cAAC,IAAD,CAAU9B,MAAOA,GAAjB,SACI,cAAC0B,GAAD,SChFZK,IAASN,OAAO,cAAC,GAAD,IAAeO,SAASC,eAAe,SAMvDrK,K,mBCXApB,EAAOC,QAAU,CAAC,YAAc,kCAAkC,MAAQ,4BAA4B,iBAAmB,yC,gCCDzH,oEAAO,IAAM8I,EAAW,SAAC2C,GACrB,IAAIA,EACJ,MAAO,qBAKEC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC5C,GAAIA,EAAMzC,OAAS2C,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,gCCRnB,UAA0B,sC,cCW1B1E,IARG,WACd,OACI,8BACI,qBAAKjD,IAAK4H,EAAWxH,IAAI,sB,mBCLrCrE,EAAOC,QAAU,CAAC,UAAY,6BAA6B,aAAe,gCAAgC,WAAa,gC,mBCAvHD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,WAAa,6B,uSCMzD6L,EAAe,2CACRC,EAAa,SAACC,GAAD,MAAkB,CAAC3M,KAAMyM,EAAcE,gBAE3DC,EAAmB,+CAGnBC,EAAkB,8CACXC,EAAgB,SAACC,GAAD,MAAgB,CAAC/M,KAAM6M,EAAiBE,cAE/DC,EAAc,0CAGdC,EAAqB,iDAKd1O,EAAiB,SAACL,GAAD,8CAAY,WAAOyI,GAAP,eAAAG,EAAA,sEACfxI,IAAWC,eAAeL,GADX,OAChCH,EADgC,OAEtC4I,EAfwC,CAAC3G,KAAM4M,EAAkBM,QAezCnP,IAFc,2CAAZ,uDAKjBS,EAAgB,SAACN,GAAD,8CAAY,WAAOyI,GAAP,eAAAG,EAAA,sEACdxI,IAAWE,cAAcN,GADX,OAC/BH,EAD+B,OAErC4I,EAASmG,EAAc/O,IAFc,2CAAZ,uDAKhBU,EAAmB,SAACC,GAAD,8CAAY,WAAOiI,GAAP,SAAAG,EAAA,+EAGbxI,IAAWG,iBAAiBC,GAHf,OAIR,IAJQ,OAIvBqI,YACTJ,EAASmG,EAAcpO,IALS,uGAAZ,uDAYnBE,EAAY,SAACC,GAAD,8CAAU,WAAO8H,GAAP,eAAAG,EAAA,sEACRxI,IAAWM,UAAUC,GADb,OAEH,KADtBd,EADyB,QAElBgJ,YACTJ,GA7ByB9B,EA6BC9G,EAASC,KAAK6G,OA7BH,CAAC7E,KAAMiN,EAAoBpI,YA0BrC,iCA1BH,IAACA,IA0BE,OAAV,uDAOZ5F,EAAc,SAACC,GAAD,8CAAiB,WAAOyH,EAAUwG,GAAjB,mBAAArG,EAAA,6DAClC5I,EAASiP,IAAWhE,UAAUhJ,GADI,SAEjB7B,IAAWW,YAAYC,GAFN,UAGZ,KADtBnB,EAFkC,QAG3BgJ,WAH2B,gBAIpCJ,EAASpI,EAAeL,IAJY,8BAS9BoC,EAAUvC,EAASsC,SAASuJ,OAAS,EAAI7L,EAASsC,SAAS,GAAK,uBACtEsG,EAASkD,YAAW,eAAgB,CAACC,OAAQxJ,KAVT,kBAW7ByL,QAAQqB,OAAO9M,IAXc,4CAAjB,yDAerB+M,EAAsB,CACxBC,MAAO,CACH,CAACnN,GAAI,EAAGG,QAAS,UAAWiN,WAAY,IACxC,CAACpN,GAAI,EAAGG,QAAS,8BAAgCiN,WAAY,GAC7D,CAACpN,GAAI,EAAGG,QAAS,0BAA2BiN,WAAY,GACxD,CAACpN,GAAI,EAAGG,QAAS,kCAAmCiN,WAAY,IAEpEL,QAAS,KACTxO,OAAQ,IAsCG8L,IAnCQ,WAAiD,IAAhDD,EAA+C,uDAAhC8C,EAAqB5M,EAAW,uCAGnE,OAAQA,EAAOT,MACX,KAAKyM,EACD,IAAMe,EAAU,CAACrN,GAAI,EAAGG,QAASG,EAAOkM,YAAaY,WAAY,GACjE,OAAO,2BACAhD,GADP,IAEI+C,MAAM,GAAD,mBAAM/C,EAAa+C,OAAnB,CAA0BE,MAEvC,KAAKZ,EACD,OAAO,2BACArC,GADP,IAEI2C,QAASzM,EAAOyM,UAExB,KAAKL,EACD,OAAO,2BACAtC,GADP,IAEI7L,OAAQ+B,EAAOsM,YAEvB,KAAKC,EACD,OAAO,2BACAzC,GADP,IAEI+C,MAAM,YAAK/C,EAAa+C,MAAMpJ,QAAO,SAAA/F,GAAI,OAAIA,EAAKgC,KAAOM,EAAOgN,aAExE,KAAKR,EACD,OAAO,2BACA1C,GADP,IAEI2C,QAAQ,2BAAK3C,EAAa2C,SAAnB,IAA4BrI,OAAQpE,EAAOoE,WAE1D,QACI,OAAO0F,K,gCC9GJ,QAA0B,4C","file":"static/js/main.01cd7063.chunk.js","sourcesContent":["import axios from \"axios\";\n\n// Создание единого шаблона для похожих axios-запросов.\nconst instance = axios.create({\n    // Основная повторяющаяся часть URL.\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    // Вместе с запросом передается куки.\n    withCredentials: true,\n    // Все запросы кроме get, как правило требуют ключ доступа.\n    headers: {\"API-KEY\": \"f841d812-c73f-4d3d-a2fd-8879f3cbde4b\"},\n})\n\nexport const usersAPI = {\n    getUsers(currentPage, pageSize) {\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\n            .then(response => response.data);\n    },\n    follow(userId) {\n        return instance.post(`follow/${userId}`)\n            .then(response => response.data);\n    },\n    unfollow(userId) {\n        return instance.delete(`follow/${userId}`)\n            .then(response => response.data);\n    },\n};\n\nexport const profileAPI = {\n    getUserProfile(userId) {\n        return instance.get(`profile/${userId}`)\n            .then(response => response.data);\n    },\n    getUserStatus(userId) {\n        return instance.get(`profile/status/${userId}`)\n            .then(response => response.data);\n    },\n    updateUserStatus(status) {\n        return instance.put(`profile/status`, {status: status})\n            .then(response => response.data);\n    },\n    savePhoto(file) {\n        // В случае отправки файла, нужно подготовить специальную formData и третьим параметром добавить headers.\n        const formData = new FormData();\n        formData.append(\"image\", file);\n        return instance.put(`profile/photo`, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        }).then(response => response.data);\n    },\n    saveProfile(profileData) {\n        return instance.put(`profile`, profileData)\n            .then(response => response.data);\n    },\n};\n\nexport const authAPI = {\n    isIdentified() {\n        return instance.get(`auth/me`)\n            .then(response => response.data);\n    },\n    login(email, password, rememberMe = false, captcha = null) {\n        return instance.post(`auth/login`, {email, password, rememberMe, captcha})\n            .then(response => response.data);\n    },\n    logout() {\n        return instance.delete(`auth/login`)\n            .then(response => response.data);\n    },\n};\n\nexport const securityAPI = {\n    getCaptchaURL() {\n        return instance.get(`security/get-captcha-url`)\n            .then(response => response.data);\n    },\n};\n","// Reducer принимает на вход state и action и возвращает измененный (на основании action) state.\n// Action это объект содержащий информацию о том что мы хотим изменить.\n\n// ACTION CREATORS:\nconst SEND_MESSAGE = 'pirateSocialNetwork/dialogs/SEND-MESSAGE';\nexport const sendMessage = (newMessageText) => ({type: SEND_MESSAGE, newMessageText});\n\nconst initialDialogsState = {\n    dialogs: [\n        {id: 1, name: 'Captain Cartman'},\n        {id: 2, name: 'Peter Blood'},\n        {id: 3, name: 'Fleet Master Seahorn'},\n        {id: 4, name: 'Red Beard'},\n        {id: 5, name: 'Rock’n’Rolf'},\n        {id: 6, name: 'Pirate burb'},\n    ],\n    messages: [\n        {id: 1, message: 'Who\\'s there?! Oo'},\n        {id: 2, message: 'Yarrrrr!'},\n        {id: 3, message: 'Fifteen men on the dead man\\'s chest! Yo-ho-ho, and a bottle of rum!'},\n        {id: 4, message: 'Red Beard is oaf :P'},\n    ]\n};\n\nconst dialogsReducer = (dialogsState = initialDialogsState, action) => {\n    // В виду специфики работы react-redux, из редьюсера нужно возвращать не измененный state,\n    // а его копию с новыми изменениями. Глубоко копируем только то что собираемся менять.\n    switch (action.type) {\n        case SEND_MESSAGE:\n            const newMessage = {id: 5, message: action.newMessageText};\n            return {\n                ...dialogsState,\n                messages: [...dialogsState.messages, newMessage],\n            };\n        default:\n            return dialogsState;\n    }\n};\n\nexport default dialogsReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userAvatar\":\"User_userAvatar__1-Q_0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2imOE\",\"item\":\"Navbar_item__zmMk4\",\"active\":\"Navbar_active__3mbhk\"};","import React from \"react\";\nimport css from \"./FormControls.module.css\"\nimport {Field} from \"redux-form\";\n\n// meta - внутренняя деструктуризация.\nconst FormControl = ({input, meta: {touched, error}, Formtype, ...props}) => { // rest-оператор\n    const hasError = touched && error;\n    // && - the operator returns the value of the first falsy operand encountered when evaluating from left to right,\n    // or the value of the last operand if they are all truthy.\n\n    return (\n        <div className={css.formControl + \" \" + (hasError ? css.error : \" \")}>\n            <div><Formtype {...input} {...props} /></div>\n            {hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\nexport const Input = (props) => {\n    return <FormControl {...props} Formtype='input'/>\n}\n\nexport const Textarea = (props) => {\n    return <FormControl {...props} Formtype='textarea'/>\n}\n\nexport const createField = (placeholder, name, validate, component, props = {}, text = \"\") => (\n    <div><Field placeholder={placeholder} name={name} validate={validate} component={component} {...props}/>{text}</div>\n)\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import css from \"./Navbar.module.css\";\nimport {NavLink} from \"react-router-dom\";\n\nconst Navbar = () => {\n    // NavLink меняет адрес в адресной строке не перезагружая страницу.\n    return (\n        <nav className={css.nav}>\n            <div className={css.item}>\n                <NavLink to=\"/profile\" activeClassName={css.active}>Profile</NavLink>\n            </div>\n            <div className={css.item}>\n                <NavLink to=\"/dialogs\" activeClassName={css.active}>Dialogs</NavLink>\n            </div>\n            <div className={css.item}>\n                <NavLink to=\"/users\" activeClassName={css.active}>Users</NavLink>\n            </div>\n            <div className={css.item}>\n                <NavLink to=\"/news\" activeClassName={css.active}>News</NavLink>\n            </div>\n            <div className={css.item}>\n                <NavLink to=\"/music\" activeClassName={css.active}>Music</NavLink>\n            </div>\n            <div className={css.item}>\n                <NavLink to=\"/settings\" activeClassName={css.active}>Settings</NavLink>\n            </div>\n        </nav>\n    );\n};\n\nexport default Navbar;\n","import css from \"./News.module.css\";\n\nconst News = () => {\n    return (\n        <div>\n            News\n        </div>\n    );\n};\n\nexport default News;","import css from \"./Music.module.css\";\n\nconst Music = () => {\n    return (\n        <div>\n            Music\n        </div>\n    );\n};\n\nexport default Music;","import css from \"./Settings.module.css\";\n\nconst Settings = () => {\n    return (\n        <div>\n            Settings\n        </div>\n    );\n};\n\nexport default Settings;","import css from \"./Paginator.module.css\";\nimport React, {useState} from \"react\";\nimport classNames from \"classnames\";\n\nconst Paginator = ({pageSize, totalItemsCount, currentPage, onPageChange, portionSize = 10}) => {\n\n    const pagesCount = Math.ceil(totalItemsCount / pageSize);\n    const pages = [];\n    for (let i = 1; i <= pagesCount; i += 1) {\n        pages.push(i);\n    }\n\n    const portionsCount = Math.ceil(pagesCount / portionSize);\n\n    // Хук useState возвращает массив из 2 значений.\n    // Первое это непосредственно наш state. Второе это функция для изменения этого state.\n    // Через аргумент задается initialState.\n    const [portionNumber, setPortionNumber] = useState(1);\n\n    const leftBorderOfThePortion = (portionNumber - 1) * portionSize + 1;\n    const rightBorderOfThePortion = portionNumber * portionSize;\n\n    return (\n        <div className={css.paginator}>\n            {portionNumber > 1 && <button onClick={() => setPortionNumber(portionNumber - 1)}>Previous</button>}\n            {\n                // Текущей странице задается класс selectedPage.\n                // В анонимную функцию приходит e, но мы его не используем.\n                pages\n                    .filter(page => page >= leftBorderOfThePortion && page <= rightBorderOfThePortion)\n                    .map(page => <span\n                        className={classNames({[css.selectedPage]: currentPage === page}, css.pageNumber)}\n                        onClick={(e) => onPageChange(page)} key={page}>{page}</span>)\n            }\n            {portionNumber < portionsCount && <button onClick={() => setPortionNumber(portionNumber + 1)}>Next</button>}\n        </div>\n    );\n}\n\nexport default Paginator;","import css from \"./User.module.css\";\nimport common_avatar from \"../../assets/images/common_avatar.jpg\";\nimport React from \"react\";\nimport {NavLink} from \"react-router-dom\";\n\nconst User = ({user, followingInProgress, follow, unfollow}) => {\n    return (\n        <div>\n            <span>\n                <div>\n                    <NavLink to={'/profile/' + user.id}>\n                        <img src={user.photos.small !== null ? user.photos.small : common_avatar}\n                             alt=\"Avatar\" className={css.userAvatar}/>\n                    </NavLink>\n                </div>\n                <div>\n                    {user.followed\n                        // Кнопка не активна, если процесс follow/unfollow еще не завершен.\n                        ? <button disabled={followingInProgress.some(id => id === user.id)}\n                                  onClick={() => unfollow(user.id)}>Unfollow</button>\n                        : <button disabled={followingInProgress.some(id => id === user.id)}\n                                  onClick={() => follow(user.id)}>Follow</button>\n                    }\n                </div>\n            </span>\n            <span>\n                <span>\n                    <div>{user.name}</div>\n                    <div>{user.status}</div>\n                </span>\n            </span>\n        </div>);\n}\n\nexport default User;","import React from \"react\";\nimport Paginator from \"../common/Paginator/Paginator\";\nimport User from \"./User\";\n\nconst Users = ({\n                   follow, unfollow, users,\n                   pageSize, totalUsersCount,\n                   currentPage, onPageChange,\n                   followingInProgress\n               }) => {\n\n    return (\n        <div>\n            <Paginator currentPage={currentPage}\n                       onPageChange={onPageChange}\n                       totalItemsCount={totalUsersCount}\n                       pageSize={pageSize}/>\n            <div>\n                {users.map(user => <User user={user}\n                                         key={user.id}\n                                         follow={follow}\n                                         unfollow={unfollow}\n                                         followingInProgress={followingInProgress}/>)}\n            </div>\n        </div>\n    );\n}\n\nexport default Users;","export const newPropsForObjectInArray = (array, propValue, objPropName, newObjProps) => {\n    return array.map(item => {\n        if (item[objPropName] === propValue) {\n            return {...item, ...newObjProps}\n        }\n        return item;\n    })\n}","import {usersAPI} from \"../api/api\";\nimport {newPropsForObjectInArray} from \"../utils/objects-helpers\";\n\n// Reducer принимает на вход state и action и возвращает измененный (на основании action) state.\n// Action это объект содержащий информацию о том что мы хотим изменить.\n\n// ACTION CREATORS:\nconst FOLLOW_SUCCESS = 'pirateSocialNetwork/users/FOLLOW_SUCCESS';\nexport const followSuccess = (userId) => ({type: FOLLOW_SUCCESS, userId});\n\nconst UNFOLLOW_SUCCESS = 'pirateSocialNetwork/users/UNFOLLOW_SUCCESS';\nexport const unfollowSuccess = (userId) => ({type: UNFOLLOW_SUCCESS, userId});\n\nconst SET_USERS = 'pirateSocialNetwork/users/SET_USERS';\nexport const setUsers = (users) => ({type: SET_USERS, users});\n\nconst SET_CURRENT_PAGE = 'pirateSocialNetwork/users/SET_CURRENT_PAGE';\nexport const setCurrentPage = (currentPage) => ({type: SET_CURRENT_PAGE, currentPage});\n\nconst SET_TOTAL_USERS_COUNT = 'pirateSocialNetwork/users/SET_TOTAL_USERS_COUNT';\nexport const setTotalUsersCount = (totalUsersCount) => ({type: SET_TOTAL_USERS_COUNT, totalUsersCount});\n\nconst TOGGLE_IS_FETCHING = 'pirateSocialNetwork/users/TOGGLE_IS_FETCHING';\nexport const toggleIsFetching = (isFetching) => ({type: TOGGLE_IS_FETCHING, isFetching});\n\nconst TOGGLE_FOLLOWING_PROGRESS = 'pirateSocialNetwork/users/TOGGLE_FOLLOWING_PROGRESS';\nexport const toggleFollowingProgress = (followingInProgress, userId) => ({\n    type: TOGGLE_FOLLOWING_PROGRESS, followingInProgress, userId\n});\n\n// THUNKS это функции которые сначала делают асинхронные операции, а потом диспатчат actions.\n// Необходимые параметры передаются при помощи замыкания.\nexport const requestUsers = (currentPage, pageSize) => async (dispatch) => {\n    dispatch(toggleIsFetching(true));\n    dispatch(setCurrentPage(currentPage));\n    const data = await usersAPI.getUsers(currentPage, pageSize);\n    dispatch(toggleIsFetching(false));\n    dispatch(setUsers(data.items));\n    dispatch(setTotalUsersCount(data.totalCount));\n};\n\n// Объединение общей логики для follow и unfollow.\nconst followUnfollowFlow = async (dispatch, userId, apiMethod, actionCreator) => {\n    dispatch(toggleFollowingProgress(true, userId));\n    const data = await apiMethod(userId);\n    if (data.resultCode === 0) {\n        dispatch(actionCreator(userId));\n    }\n    dispatch(toggleFollowingProgress(false, userId));\n}\n\nexport const follow = (userId) => async (dispatch) => {\n    await followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess);\n};\n\nexport const unfollow = (userId) => async (dispatch) => {\n    await followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess);\n};\n\nconst initialUsersState = {\n    users: [],\n    pageSize: 10,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: false,\n    followingInProgress: [],\n};\n\nconst usersReducer = (usersState = initialUsersState, action) => {\n    // В виду специфики работы react-redux, из редьюсера нужно возвращать не измененный state,\n    // а его копию с новыми изменениями. Глубоко копируем только то что собираемся менять.\n    switch (action.type) {\n        case FOLLOW_SUCCESS:\n            return {\n                ...usersState,\n                users: newPropsForObjectInArray(usersState.users, action.userId, \"id\", {followed: true}),\n            }\n        case UNFOLLOW_SUCCESS:\n            return {\n                ...usersState,\n                users: newPropsForObjectInArray(usersState.users, action.userId, \"id\", {followed: false}),\n            }\n        case SET_USERS:\n            return {...usersState, users: action.users};\n        case SET_CURRENT_PAGE:\n            return {...usersState, currentPage: action.currentPage};\n        case SET_TOTAL_USERS_COUNT:\n            return {...usersState, totalUsersCount: action.totalUsersCount};\n        case TOGGLE_IS_FETCHING:\n            return {...usersState, isFetching: action.isFetching};\n        case TOGGLE_FOLLOWING_PROGRESS:\n            return {\n                ...usersState,\n                followingInProgress: action.followingInProgress\n                    // Процесс идет - добавляем id в массив.\n                    ? [...usersState.followingInProgress, action.userId]\n                    // Процесс завершился - удаляем id из массива.\n                    : usersState.followingInProgress.filter(id => id !== action.userId)\n            };\n        default:\n            return usersState;\n    }\n};\n\nexport default usersReducer;","import {createSelector} from \"reselect\";\n\n// Селектор это функция достающая данные из state. Это промежуточное звено между state и mapStateToProps.\n// Таким образом, в случае изменений у нас будет одна точка корректировки.\n\nconst getUsersSelector = (state) => {\n    return state.usersState.users;\n};\n\n// Селектор с логикой (учебный) созданный при помощи библиотеки reselect.\n// Этот селектор запускается только тогда когда изменения в state касаются лично его.\n// В остальных случаях он возвращает запомненное значения, не запуская при этом функцию.\n// Это помогает избежать лишней калькуляции, перерисовок и сложностей с отладкой.\nexport const getUsers = createSelector(getUsersSelector, (users) => {\n    return users.filter(user => true);\n})\n\nexport const getPageSize = (state) => {\n    return state.usersState.pageSize;\n};\n\nexport const getTotalUsersCount = (state) => {\n    return state.usersState.totalUsersCount;\n};\n\nexport const getCurrentPage = (state) => {\n    return state.usersState.currentPage;\n};\n\nexport const getIsFetching = (state) => {\n    return state.usersState.isFetching;\n};\n\nexport const getFollowingInProgress = (state) => {\n    return state.usersState.followingInProgress;\n};","import {connect} from \"react-redux\";\nimport React from \"react\";\nimport Users from \"./Users\";\nimport Preloader from \"../common/Preloader/Preloader\";\nimport {requestUsers, follow, unfollow} from \"../../redux/usersReducer\";\nimport {compose} from \"redux\";\nimport {\n    getCurrentPage,\n    getFollowingInProgress,\n    getIsFetching,\n    getPageSize,\n    getTotalUsersCount, getUsers\n} from \"../../redux/usersSelectors\";\n\n// Вторая контейнерная компонента которая делает AJAX-запросы и отрисовывает презентационную компоненту.\nclass UsersContainer extends React.Component {\n    // Этот метод вызывается сразу после вставки компоненты в DOM.\n    // В данном случае он отрисовывает первую страницу пользователей\n    // и передает в totalUsersCount их общее количество.\n    componentDidMount() {\n        this.props.requestUsers(this.props.currentPage, this.props.pageSize);\n    }\n\n    // Этот метод срабатывает на клик.\n    // Он изменяет currentPage и отрисовывает нужную нам страницу пользователей.\n    // На момент вызова этого AJAX пропсы еще не вернулись, поэтому используем pageNumber а не currentPage.\n    onPageChange = (pageNumber) => {\n        this.props.requestUsers(pageNumber, this.props.pageSize);\n    }\n\n    render() {\n        const {\n            users, follow, unfollow, pageSize, totalUsersCount, currentPage,\n            isFetching, followingInProgress,\n        } = this.props;\n        return <>\n            {isFetching ? <Preloader/> : null}\n            <Users users={users} follow={follow} unfollow={unfollow} pageSize={pageSize}\n                   totalUsersCount={totalUsersCount} currentPage={currentPage} followingInProgress={followingInProgress}\n                   onPageChange={this.onPageChange}/>\n        </>\n    }\n}\n\n// Возвращает объект с данными из state которые будут переданы в презентационную компоненту в качестве пропсов.\nconst mapStateToProps = (state) => {\n    return {\n        users: getUsers(state),\n        pageSize: getPageSize(state),\n        totalUsersCount: getTotalUsersCount(state),\n        currentPage: getCurrentPage(state),\n        isFetching: getIsFetching(state),\n        followingInProgress: getFollowingInProgress(state),\n    }\n};\n\n// Объединение разных обработчиков функцией compose.\nexport default compose(\n    connect(mapStateToProps, {requestUsers, follow, unfollow}),\n)(UsersContainer);\n\n/*\nConnect создаёт контейнерную компоненту внутри которой отрисовывает другую компоненту и в виде пропсов передают в неё\nданные из объектов которые возвращаются двумя функциями. Когда происходят изменения, connect перерисовывает компоненту.\n\nВместо функции mapDispatchToProps вторым параметром мы передаем объект. Connect сам приведет его к виду:\nfollow: (userId) => dispatch(followActionCreator(userId)).\nКак и в случае с mapStateToProps, колбэки будут переданы в презентационную компоненту в качестве пропсов.\n*/\n\n","export default __webpack_public_path__ + \"static/media/flag.5c2e6fb4.jpg\";","import css from \"./Header.module.css\";\nimport flag from \"./flag.jpg\";\nimport {NavLink} from \"react-router-dom\";\n\nconst Header = (props) => {\n    return (\n        <header className={css.header}>\n            <img src={flag} alt=\"Pirate flag\"/>\n            <div className={css.loginBlock}>\n                {props.isAuth\n                    ? <div>{props.login} <button onClick={props.logout}>Logout</button></div>\n                    : <NavLink to=\"/login\"><button>Login</button></NavLink>}\n            </div>\n        </header>\n    );\n};\n\nexport default Header;\n","import {authAPI, securityAPI} from \"../api/api\";\nimport {stopSubmit} from \"redux-form\";\n\n// Reducer принимает на вход state и action и возвращает измененный (на основании action) state.\n// Action это объект содержащий информацию о том что мы хотим изменить.\n\n// ACTION CREATORS:\nconst SET_AUTH_USER_DATA = 'pirateSocialNetwork/auth/SET_AUTH_USER_DATA';\nexport const setAuthUserData = (id, email, login, isAuth) => ({\n    type: SET_AUTH_USER_DATA,\n    data: {id, email, login, isAuth}\n});\n\nconst SET_CAPTCHA_URL = 'pirateSocialNetwork/auth/SET_CAPTCHA_URL';\nexport const setCaptchaURL = (captchaURL) => ({\n    type: SET_CAPTCHA_URL,\n    data: {captchaURL}\n});\n\n// THUNKS это функции которые сначала делают асинхронные операции, а потом диспатчат actions.\n// Необходимые параметры передаются при помощи замыкания.\nexport const getAuthUserData = () => async (dispatch) => {\n    const response = await authAPI.isIdentified();\n    // Если пользователь идентифицирован - записываем информацию о нем в authState.\n    if (response.resultCode === 0) {\n        const {id, email, login} = response.data;\n        dispatch(setAuthUserData(id, email, login, true));\n    }\n};\n\nexport const login = (email, password, rememberMe, captcha) => async (dispatch) => {\n    const response = await authAPI.login(email, password, rememberMe, captcha);\n    if (response.resultCode === 0) {\n        // success, get auth data.\n        dispatch(getAuthUserData());\n    } else {\n        if (response.resultCode === 10) {\n            dispatch(getCaptchaURL())\n        }\n        // stopSubmit() это action-creator из библиотеки redux-form, позволяющий в случае несрабатывания формы\n        // отобразить ошибку. 1 параметр - название формы, 2 параметр - поле и текст ошибки.\n        // _error означает что ошибка будет не на конкретное поле, а на всю форму.\n        const message = response.messages.length > 0 ? response.messages[0] : 'Something went wrong';\n        dispatch(stopSubmit('login', {_error: message}));\n    }\n};\n\nexport const getCaptchaURL = () => async (dispatch) => {\n    const response = await securityAPI.getCaptchaURL();\n    const captchaURL = response.url;\n    dispatch(setCaptchaURL(captchaURL));\n};\n\nexport const logout = () => async (dispatch) => {\n    const response = await authAPI.logout();\n    if (response.resultCode === 0) {\n        dispatch(setAuthUserData(null, null, null, false));\n    }\n};\n\nconst initialState = {\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false,\n    captchaURL: null, // if null - captcha is not required.\n};\n\nconst authReducer = (authState = initialState, action) => {\n    // В виду специфики работы react-redux, из редьюсера нужно возвращать не измененный state,\n    // а его копию с новыми изменениями. Глубоко копируем только то что собираемся менять.\n    switch (action.type) {\n        case SET_AUTH_USER_DATA:\n        case SET_CAPTCHA_URL:\n            return {\n                ...authState,\n                ...action.data,\n            }\n        default:\n            return authState;\n    }\n};\n\nexport default authReducer;","import React from \"react\";\nimport Header from \"./Header\";\nimport {connect} from \"react-redux\";\nimport {logout} from \"../../redux/authReducer\";\n\nclass HeaderContainer extends React.Component {\n    render() {\n        return (\n            <Header isAuth={this.props.isAuth} login={this.props.login} logout={this.props.logout}/>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isAuth: state.authState.isAuth,\n        login: state.authState.login,\n    }\n};\n\nexport default connect(mapStateToProps, {logout})(HeaderContainer);\n","import css from \"../common/FormControls/FormControls.module.css\";\nimport {reduxForm} from \"redux-form\";\nimport {createField, Input} from \"../common/FormControls/FormControls\";\nimport {required} from \"../../utils/validators\";\nimport {connect} from \"react-redux\";\nimport {login} from \"../../redux/authReducer\";\nimport {Redirect} from \"react-router-dom\";\n\n// Внутри Field уже зашиты onChange, который будет брать данные и отправлять их в state.\n// Атрибут name это то под каким именем данные уйдут на сервер.\n// В нашем случае, Field создается при помощи функции createField.\nconst LoginForm = ({handleSubmit, error, captchaURL}) => {\n    // Дефолтное поведение кнопки в форме - сабмитить форму.\n    // В форму в виде пропсов приходит много методов. Пропсы прокидывает HOC-компонента LoginReduxForm.\n    // Внутри handleSubmit вызовется onSubmit который мы передали в LoginReduxForm при отрисовке,\n    // а в него придут все собранные из формы данные.\n    return (\n        <form onSubmit={handleSubmit}>\n            {createField(\"Email\", \"email\", [required], Input)}\n            {createField(\"Password\", \"password\", [required], Input, {type: \"password\"})}\n            {createField(null, \"rememberMe\", null, Input, {type: \"checkbox\"}, \"Remember me\")}\n            {error && <div className={css.formSummaryError}>{error}</div>}\n\n            {captchaURL && <img src={captchaURL} alt={\"Captcha\"}/>}\n            {captchaURL && createField(\"Symbols from image\", \"captcha\", [required], Input)}\n\n            <div>\n                <button>Login</button>\n            </div>\n        </form>\n    );\n};\n\n// Форм будет много, поэтому каждой нужно своё уникальное имя (в данном случае - login).\n// LoginReduxForm это контейнерная компонентой над LoginForm. Это HOC через который будет осуществляться общение формы с редьюсером.\nconst LoginReduxForm = reduxForm({form: 'login'})(LoginForm);\n\n// При отрисовке формы (LoginReduxForm) нужно передать в неё \"родительский\" submit.\nconst Login = (props) => {\n    // В \"родительский\" submit приходят все данные из формы.\n    const onSubmit = (formData) => {\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha);\n    }\n\n    if (props.isAuth) {\n        return <Redirect to={'/profile'}/>\n    }\n\n    return (\n        <div>\n            <h1>Login</h1>\n            <LoginReduxForm onSubmit={onSubmit} captchaURL={props.captchaURL}/>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    isAuth: state.authState.isAuth,\n    captchaURL: state.authState.captchaURL,\n});\n\n// По дефолту экспортируется безымянная контейнерна компонента, образовавшаяся при помощи хока connect.\nexport default connect(mapStateToProps, {login})(Login);","import {getAuthUserData} from \"./authReducer\";\n\n// Reducer принимает на вход state и action и возвращает измененный (на основании action) state.\n// Action это объект содержащий информацию о том что мы хотим изменить.\n\n// ACTION CREATORS:\nconst INITIALIZED_SUCCESS = 'pirateSocialNetwork/app/INITIALIZED_SUCCESS';\nexport const initializeSuccess = () => ({type: INITIALIZED_SUCCESS});\n\n// THUNKS это функции которые сначала делают асинхронные операции, а потом диспатчат actions.\n// Необходимые параметры передаются при помощи замыкания.\nexport const initializeApp = () => (dispatch) => {\n    let promise = dispatch(getAuthUserData());\n    // Когда выполнятся все промисы из массива (в данном случае он один), сработает then.\n    Promise.all([promise]).then(() => {\n        dispatch(initializeSuccess());\n    })\n};\n\nconst initialState = {\n    initialized: false,\n};\n\nconst appReducer = (appState = initialState, action) => {\n    // В виду специфики работы react-redux, из редьюсера нужно возвращать не измененный state,\n    // а его копию с новыми изменениями. Глубоко копируем только то что собираемся менять.\n    switch (action.type) {\n        case INITIALIZED_SUCCESS:\n            return {\n                ...appState,\n                initialized: true,\n            }\n        default:\n            return appState;\n    }\n};\n\nexport default appReducer;","import {applyMiddleware, combineReducers, compose} from \"redux\";\nimport profileReducer from \"./profileReducer\";\nimport dialogsReducer from \"./dialogsReducer\";\nimport usersReducer from \"./usersReducer\";\nimport authReducer from \"./authReducer\";\nimport thunkMiddleware from \"redux-thunk\";\nimport {reducer as formReducer} from 'redux-form';\nimport appReducer from \"./appReducer\";\n\nconst {createStore} = require(\"redux\");\n\n// Преобразуем объект с данными и редьюсерами в одну функцию.\nlet reducers = combineReducers({\n    profileState: profileReducer,\n    dialogsState: dialogsReducer,\n    usersState: usersReducer,\n    authState: authReducer,\n    appState: appReducer,\n    form: formReducer, // Reducer библиотеки redux-form (state обязательно должен называться \"form\").\n});\n\n// При помощи созданной выше функции создаём store.\n// applyMiddleware - создание промежуточного слоя для использования thunks.\n// composeEnhancers - подключение браузерного расширения Redux DevTools Extension.\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\n\n// window.store = store;\nexport default store;","import React, {Suspense} from \"react\";\n\n// HOC-компонента принимает компонент и возвращает другой компонент.\n// Это один из способов для повторного использования одной и той же логики.\n\n// Оборачивает компоненту тегом <Suspense> для использования React.lazy.\nconst withSuspense = (Component) => {\n    return (props) => {\n        return <Suspense fallback={<div>Loading...</div>}>\n            <Component {...props}/>\n        </Suspense>\n    }\n}\n\nexport default withSuspense;","import './App.css';\nimport Navbar from './components/Navbar/Navbar';\nimport {BrowserRouter, HashRouter, Redirect, Route, Switch, withRouter} from \"react-router-dom\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Settings\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport Login from \"./components/Login/Login\";\nimport React, {Component} from \"react\";\nimport {connect, Provider} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {initializeApp} from \"./redux/appReducer\";\nimport Preloader from \"./components/common/Preloader/Preloader\";\nimport store from \"./redux/reduxStore\";\nimport withSuspense from \"./hoc/withSuspense\";\n\n// Импорт при помощи React.lazy означает что этого модуля не будет в базовой загрузке.\n// Он будет загружен только когда потребуется.\n// Для работы в этом режиме, компонента должна находится внутри тега <Suspense>.\nconst ProfileContainer = React.lazy(() => import(\"./components/Profile/ProfileContainer\"));\nconst DialogsContainer = React.lazy(() => import(\"./components/Dialogs/DialogsContainer\"));\n\nclass App extends Component {\n    catchAllUnhandledErrors = (reason, promise) => {\n        // alert(\"Some error occurred\");\n    }\n\n    // Узнаем идентифицирован пользователь или нет и отлавливаем ошибки.\n    componentDidMount() {\n        this.props.initializeApp();\n        window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n    }\n\n    // Если в компоненте делается addEventListener, то в последствие должен быть обязательно сделан removeEventListener.\n    componentWillUnmount() {\n        window.removeEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n\n        // Route следит за адресной строкой браузера и, в случае её совпадения с path, запускает render данных.\n        // \"?\" означает что параметр опциональный и <ProfileContainer/> будет рендериться и без него.\n        // :userId? - значение этого параметра придет в пропсы через withRouter.\n\n        // При \"exact path\" компонента отрисуется только при точном соответствие пути.\n        // Switch идет сверху вниз по роутам и как только находит соответствие - отрисовывает компоненту и прекращает перебор.\n        return (\n            <div className='app-wrapper'>\n                <HeaderContainer/>\n                <Navbar/>\n                <div className='app-wrapper-content'>\n                    <Switch>\n                        <Route exact path='/' render={() => <Redirect to={'/profile'}/>}/>\n                        <Route path='/profile/:userId?' render={withSuspense(ProfileContainer)}/>\n                        <Route path='/dialogs' render={withSuspense(DialogsContainer)}/>\n                        <Route path='/users' render={() => <UsersContainer/>}/>\n                        <Route path='/news' render={() => <News/>}/>\n                        <Route path='/music' render={() => <Music/>}/>\n                        <Route path='/settings' render={() => <Settings/>}/>\n                        <Route path='/login' render={() => <Login/>}/>\n                        <Route path='*' render={() => <div>404 NOT FOUND</div>}/>\n                    </Switch>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    initialized: state.appState.initialized,\n})\n\n// При коннекте компонента с роутами нужно обернуть её в HOC withRouter (это баг).\nconst AppContainer = compose(\n    withRouter,\n    connect(mapStateToProps, {initializeApp}))(App);\n\nconst PiratesApp = () => {\n    // Для использования компоненты Route нужно обернуть код в котором она присутствует в BrowserRouter.\n    // Provider оборачивает основной компонент приложения и делает store доступным для дочерних компонент (контекст).\n    return <HashRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </HashRouter>\n}\n// Для корректной работы на gh-pages мы используем олдскульный <HashRouter> вместо <BrowserRouter>.\n// При использовании <BrowserRouter>, для корректного отображения URL нужно добавить атрибут: basename={process.env.PUBLIC_URL}.\n// basename - настройка позволяющая работать без ошибок в разных средах (при запуске в браузере у нас один URL,\n// при деплое на github pages другой и т. д.)\nexport default PiratesApp;","import React from 'react';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport ReactDOM from 'react-dom';\nimport PiratesApp from \"./App\";\n\nReactDOM.render(<PiratesApp/>, document.getElementById('root'));\n// Из-за React.StrictMode массив users отрисовывался 2 раза подряд.\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__2axsW\",\"error\":\"FormControls_error__24y5C\",\"formSummaryError\":\"FormControls_formSummaryError__kXbFS\"};","export const required = (value) => {\n    if (value) return undefined;\n    return \"Field is required\";\n}\n\n// Замыкание - функция вызывает другую функцию и эта внутренняя функция получает доступ к данным из внешней.\n// Мы вызываем maxLengthCreator, передаем в него значение и он возвращает нам функцию валидатор с этим значением внутри.\nexport const maxLengthCreator = (maxLength) => (value) => {\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\n    return undefined;\n}\n\n\n","export default __webpack_public_path__ + \"static/media/preloader.6121396b.svg\";","import preloader from \"../../../assets/images/preloader.svg\";\nimport React from \"react\";\n\nconst Preloader = () => {\n    return (\n        <div>\n            <img src={preloader} alt=\"Loading wheel\"/>\n        </div>\n    )\n}\n\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__18P4_\",\"selectedPage\":\"Paginator_selectedPage__3SIki\",\"pageNumber\":\"Paginator_pageNumber__xOsKi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\",\"loginBlock\":\"Header_loginBlock__6mma5\"};","import {profileAPI} from \"../api/api\";\nimport {stopSubmit} from \"redux-form\";\n\n// Reducer принимает на вход state и action и возвращает измененный (на основании action) state.\n// Action это объект содержащий информацию о том что мы хотим изменить.\n\n// ACTION CREATORS:\nconst ADD_NEW_POST = 'pirateSocialNetwork/profile/ADD-NEW-POST';\nexport const addNewPost = (newPostText) => ({type: ADD_NEW_POST, newPostText});\n\nconst SET_USER_PROFILE = 'pirateSocialNetwork/profile/SET_USER_PROFILE';\nexport const setUserProfile = (profile) => ({type: SET_USER_PROFILE, profile});\n\nconst SET_USER_STATUS = 'pirateSocialNetwork/profile/SET_USER_STATUS';\nexport const setUserStatus = (newStatus) => ({type: SET_USER_STATUS, newStatus});\n\nconst DELETE_POST = 'pirateSocialNetwork/profile/DELETE_POST';\nexport const deletePost = (postId) => ({type: DELETE_POST, postId});\n\nconst SAVE_PHOTO_SUCCESS = 'pirateSocialNetwork/profile/SAVE_PHOTO_SUCCESS'\nexport const savePhotoSuccess = (photos) => ({type: SAVE_PHOTO_SUCCESS, photos});\n\n// THUNKS это функции которые сначала делают асинхронные операции, а потом диспатчат actions.\n// Необходимые параметры передаются при помощи замыкания.\nexport const getUserProfile = (userId) => async (dispatch) => {\n    const response = await profileAPI.getUserProfile(userId);\n    dispatch(setUserProfile(response));\n};\n\nexport const getUserStatus = (userId) => async (dispatch) => {\n    const response = await profileAPI.getUserStatus(userId);\n    dispatch(setUserStatus(response));\n};\n\nexport const updateUserStatus = (status) => async (dispatch) => {\n    // try/catch - отлов ошибки.\n    try {\n        const response = await profileAPI.updateUserStatus(status);\n        if (response.resultCode === 0) {\n            dispatch(setUserStatus(status));\n        }\n    } catch (error) {\n        // Обработка ошибки. Если перехватить её на этом уровне, то до глобального обработчика в App она не дойдет.\n    }\n};\n\nexport const savePhoto = (file) => async (dispatch) => {\n    const response = await profileAPI.savePhoto(file);\n    if (response.resultCode === 0) {\n        dispatch(savePhotoSuccess(response.data.photos));\n    }\n};\n\nexport const saveProfile = (profileData) => async (dispatch, getState) => {\n    const userId = getState().authState.id;\n    const response = await profileAPI.saveProfile(profileData);\n    if (response.resultCode === 0) {\n        dispatch(getUserProfile(userId));\n    } else {\n        // stopSubmit() – это action-creator из библиотеки redux-form, позволяющий в случае несрабатывания формы\n        // отобразить ошибку. 1 параметр - название формы, 2 параметр - поле и текст ошибки.\n        // _error означает что ошибка будет не на конкретное поле, а на всю форму.\n        const message = response.messages.length > 0 ? response.messages[0] : 'Something went wrong';\n        dispatch(stopSubmit('edit-profile', {_error: message}));\n        return Promise.reject(message);\n    }\n};\n\nconst initialProfileState = {\n    posts: [\n        {id: 1, message: 'Aboard!', likesCount: 12},\n        {id: 2, message: 'I am not fat i\\'m big boned!', likesCount: 2},\n        {id: 3, message: 'Stay away from my gold!', likesCount: 0},\n        {id: 4, message: 'LFM Tank to Deadmines last slot', likesCount: 8},\n    ],\n    profile: null,\n    status: '',\n};\n\nconst profileReducer = (profileState = initialProfileState, action) => {\n    // В виду специфики работы react-redux, из редьюсера нужно возвращать не измененный state,\n    // а его копию с новыми изменениями. Глубоко копируем только то что собираемся менять.\n    switch (action.type) {\n        case ADD_NEW_POST:\n            const newPost = {id: 5, message: action.newPostText, likesCount: 0};\n            return {\n                ...profileState,\n                posts: [...profileState.posts, newPost],\n            };\n        case SET_USER_PROFILE:\n            return {\n                ...profileState,\n                profile: action.profile,\n            };\n        case SET_USER_STATUS:\n            return {\n                ...profileState,\n                status: action.newStatus,\n            };\n        case DELETE_POST:\n            return {\n                ...profileState,\n                posts: [...profileState.posts.filter(post => post.id !== action.postId)],\n            };\n        case SAVE_PHOTO_SUCCESS:\n            return {\n                ...profileState,\n                profile: {...profileState.profile, photos: action.photos},\n            };\n        default:\n            return profileState;\n    }\n};\n\nexport default profileReducer;","export default __webpack_public_path__ + \"static/media/common_avatar.7e3312d9.jpg\";"],"sourceRoot":""}