{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/MessageItem/Message.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/MessageItem/MessageItem.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","name","path","id","className","css","dialog","to","activeClassName","active","MessageItem","message","maxLength50","maxLengthCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","dialogsState","dialogs","messages","sendMessage","dialogItems","map","d","messageItems","m","dialogsItems","values","newMessageText","mapStateToPropsForRedirect","state","isAuth","authState","withAuthRedirectComponent","Component","RedirectComponent","this","React","connect","compose","withAuthRedirect"],"mappings":"+HACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,SAAW,4B,oBCA7GD,EAAOC,QAAU,CAAC,OAAS,2BAA2B,OAAS,6B,oBCA/DD,EAAOC,QAAU,CAAC,QAAU,2B,wGCYbC,EAVI,SAACC,GAChB,IAAOC,EAAYD,EAAZC,KACDC,EAAO,YADMF,EAANG,GAEb,OACI,qBAAKC,UAAWC,IAAIC,OAApB,SACI,cAAC,IAAD,CAASC,GAAIL,EAAMM,gBAAiBH,IAAII,OAAxC,SAAiDR,O,kBCD9CS,EALK,SAACV,GACjB,IAAOW,EAAeX,EAAfW,QAAeX,EAANG,GAChB,OAAO,qBAAKC,UAAWC,IAAIM,QAApB,SAA8BA,K,iDCInCC,EAAcC,YAAiB,IAwC/BC,EAAsBC,YAAU,CAACC,KAAM,yBAAjBD,EAdL,SAACf,GACpB,OACI,uBAAMiB,SAAUjB,EAAMkB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,SAAU,CAACC,IAAUX,GAAcX,KAAK,iBAC7DuB,YAAY,yBAEvB,8BACI,kDAQDC,EAxCC,SAACzB,GACb,MAA4BA,EAAM0B,aAA3BC,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,SACTC,EAAe7B,EAAf6B,YAEDC,EAAcH,EAAQI,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAY/B,KAAM+B,EAAE/B,KAAiBE,GAAI6B,EAAE7B,IAAZ6B,EAAE7B,OAChE8B,EAAeL,EAASG,KAAI,SAAAG,GAAC,OAAI,cAAC,EAAD,CAAavB,QAASuB,EAAEvB,QAAoBR,GAAI+B,EAAE/B,IAAZ+B,EAAE/B,OAM/E,OACI,sBAAKC,UAAWC,IAAIsB,QAApB,UACI,qBAAKvB,UAAWC,IAAI8B,aAApB,SACKL,IAEL,sBAAK1B,UAAWC,IAAIuB,SAApB,UACI,8BAAMK,IACN,cAACnB,EAAD,CAAqBG,SAXX,SAACmB,GACnBP,EAAYO,EAAOC,0B,uDCTrBC,EAA6B,SAACC,GAAD,MAAY,CAACC,OAAQD,EAAME,UAAUD,SAkBzDE,EAfmB,SAACC,GAAe,IAExCC,EAFuC,4JAGzC,WAEI,OADiBC,KAAK7C,MAAfwC,OAEA,cAACG,EAAD,eAAeE,KAAK7C,QADP,cAAC,IAAD,CAAUO,GAAI,eALG,GAEbuC,IAAMH,WAUtC,OAAOI,YAAQT,EAARS,CAAoCH,I,OCdhCI,4BACXD,aAJoB,SAACR,GAAD,MAAY,CAACb,aAAca,EAAMb,gBAI5B,CAACG,kBAC1BoB,EAFWD,CAGbvB","file":"static/js/4.e559aa38.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"messages\":\"Dialogs_messages__1w_Up\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__3tDA2\",\"active\":\"DialogItem_active__2qnc5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__naj4m\"};","import css from \"./DialogItem.module.css\";\nimport {NavLink} from \"react-router-dom\";\n\nconst DialogItem = (props) => {\n    const {name, id} = props;\n    const path = \"/dialogs/\" + id;\n    return (\n        <div className={css.dialog}>\n            <NavLink to={path} activeClassName={css.active}>{name}</NavLink>\n        </div>\n    )\n};\n\nexport default DialogItem;","import css from \"./Message.module.css\";\n\nconst MessageItem = (props) => {\n    const {message, id} = props;\n    return <div className={css.message}>{message}</div>\n};\n\nexport default MessageItem;","import css from \"./Dialogs.module.css\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport MessageItem from \"./MessageItem/MessageItem\";\nimport React from \"react\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../common/FormControls/FormControls\";\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\n\nconst maxLength50 = maxLengthCreator(50);\n\nconst Dialogs = (props) => {\n    const {dialogs, messages} = props.dialogsState;\n    const {sendMessage} = props;\n\n    const dialogItems = dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>);\n    const messageItems = messages.map(m => <MessageItem message={m.message} key={m.id} id={m.id}/>);\n\n    const addNewMessage = (values) => {\n        sendMessage(values.newMessageText);\n    };\n\n    return (\n        <div className={css.dialogs}>\n            <div className={css.dialogsItems}>\n                {dialogItems}\n            </div>\n            <div className={css.messages}>\n                <div>{messageItems}</div>\n                <AddMessageReduxForm onSubmit={addNewMessage}/>\n            </div>\n        </div>\n    );\n};\n\nconst AddMessageForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={Textarea} validate={[required, maxLength50]} name='newMessageText'\n                       placeholder='Enter your message'/>\n            </div>\n            <div>\n                <button>Send</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddMessageReduxForm = reduxForm({form: 'dialogsAddMessageForm'})(AddMessageForm);\n\nexport default Dialogs;\n","import {Redirect} from \"react-router-dom\";\nimport React from \"react\";\nimport {connect} from \"react-redux\";\n\n// HOC-компонента принимает компонент и возвращает другой компонент.\n// Это один из способов для повторного использования одной и той же логики.\n\n// Возвращает объект с данными из state которые будут переданы в компоненту в качестве пропсов.\n// Еще один connect делается что бы не передавать isAuth в пропсы во всех компонентах где потребуется Redirect.\nconst mapStateToPropsForRedirect = (state) => ({isAuth: state.authState.isAuth});\n\n// Если пользователь не авторизован, то вместо отрисовки компоненты, он будет перенаправлен на страницу login.\nconst withAuthRedirectComponent = (Component) => {\n\n    class RedirectComponent extends React.Component {\n        render() {\n            const {isAuth} = this.props;\n            if (!isAuth) return <Redirect to={'/login'}/>;\n            return <Component {...this.props}/>;\n        }\n    }\n\n    // Connect создаёт контейнерную компоненту внутри которой отрисовывает переданную компоненту.\n    // В неё в виде пропсов передаются данные из объекта mapStateToPropsForRedirect.\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\n}\n\nexport default withAuthRedirectComponent;","import {sendMessage} from \"../../redux/dialogsReducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport withAuthRedirect from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n// Возвращает объект с данными из state которые будут переданы в презентационную компоненту в качестве пропсов.\nconst mapStateToProps = (state) => ({dialogsState: state.dialogsState});\n\n// Объединение разных обработчиков функцией compose.\nexport default compose(\n    connect(mapStateToProps, {sendMessage}),\n    withAuthRedirect,\n)(Dialogs);\n\n/*\n1. withAuthRedirect - HOC-обертка над компонентой.\nЕсли пользователь не авторизован, то вместо отрисовки компоненты, он будет перенаправлен на страницу login.\n\n2. Connect создаёт контейнерную компоненту внутри которой отрисовывает другую компоненту и в виде пропсов передают в неё\nданные из объектов которые возвращаются двумя функциями. Когда происходят изменения, connect сам перерисовывает дерево.\n\nВместо функции mapDispatchToProps вторым параметром мы передаем объект. Connect сам приведет его к виду:\nfollow: (userId) => dispatch(followActionCreator(userId)).\nКак и в случае с mapStateToProps, коллбеки будут переданы в презентационную компоненту в качестве пропсов.\n*/\n\n"],"sourceRoot":""}