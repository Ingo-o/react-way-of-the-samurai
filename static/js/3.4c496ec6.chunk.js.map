{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/pirate_island.jpg","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/ava_cartman.jpg","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","e","currentTarget","value","autoFocus","onBlur","updateUserStatus","onDoubleClick","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","className","css","formError","createField","Input","type","Textarea","Object","keys","contacts","map","key","contact","ProfileData","isOwner","activateEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","src","photos","large","common_avatar","userAvatar","alt","target","files","length","initialValues","formData","then","Post","message","likesCount","id","item","ava_cartman","maxLength10","maxLengthCreator","AddNewPostReduxForm","Field","placeholder","component","name","validate","required","MyPosts","postItems","posts","reverse","post","postsBlock","values","addNewPost","newPostText","connect","state","profileState","Profile","left","MyPostsContainer","ProfileContainer","this","getUserProfile","getUserStatus","authorizedUserId","userId","match","params","history","push","refreshProfile","prevProps","prevState","snapshot","React","Component","compose","authState","withRouter"],"mappings":"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","file":"static/js/3.4c496ec6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pirate_island\":\"ProfileInfo_pirate_island__1-UnM\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3cd8Y\",\"userAvatar\":\"ProfileInfo_userAvatar__qlIFO\",\"contact\":\"ProfileInfo_contact__1N3gp\",\"formError\":\"ProfileInfo_formError__39A1s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"left\":\"Profile_left__lfMz0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2ifKf\",\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\"};","export default __webpack_public_path__ + \"static/media/pirate_island.7c820348.jpg\";","import React, {useEffect, useState} from \"react\";\n\n// Локальный state синхронизируется с глобальным один раз в самом начале формирования компоненты.\n// В это время пропсы еще могут отсутствовать (зависит от того что первым придет с сервера, status или profile).\n// Поэтому нужна дополнительная синхронизация локального и глобального статусов через useEffect.\nconst ProfileStatusWithHooks = (props) => {\n\n    // Хук useState возвращает массив из 2 значений.\n    // Первое это непосредственно наш state. Второе это функция для изменения этого state.\n    // Через аргумент задается initialState.\n    const [editMode, setEditMode] = useState(false);\n    const [status, setStatus] = useState(props.status);\n\n    // Хук useEffect запускает колбэк если изменяется что-то из массива условий.\n    // В данном случае он нужен для ситуаций когда status вернулся уже после отрисовки profile.\n    useEffect(() => {\n        setStatus(props.status);\n    }, [props.status]);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateUserStatus(status);\n    }\n\n    const onStatusChange = (e) => {\n        setStatus(e.currentTarget.value);\n    }\n\n    return (\n        <div>\n            {editMode\n                ? <div><b>Status:</b> <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\n                                             value={status}/></div>\n                : <div onDoubleClick={activateEditMode}><b>Status:</b> <span>{props.status || 'No status'}</span></div>\n            }\n        </div>\n    )\n}\n\nexport default ProfileStatusWithHooks;","import {createField, Input, Textarea} from \"../../common/FormControls/FormControls\";\nimport {reduxForm} from \"redux-form\";\nimport css from \"./ProfileInfo.module.css\";\n\n// Кнопка в форме по умолчанию сабмитит форму.\nconst ProfileDataForm = ({handleSubmit, profile, error}) => {\n    return <form onSubmit={handleSubmit}>\n        <div><button>Save</button></div>\n        {error && <div className={css.formError}>{error}</div>}\n        <div><b>Name:</b> {createField(\"Name\", \"fullName\", [], Input)}</div>\n        <div><b>Looking for a job:</b> {createField(\"\", \"lookingForAJob\",\n            [], Input, {type: \"checkbox\"})}</div>\n        <div><b>My skills:</b> {createField(\"My skills\", \"lookingForAJobDescription\",\n            [], Textarea)}</div>\n        <div><b>About me:</b> {createField(\"About me\", \"aboutMe\",\n            [], Textarea)}</div>\n        <div><b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\n            return <div key={key} className={css.contact}><b>{key}:</b> {createField(key, \"contacts.\" + key,\n                [], Input)}</div>\n        })}</div>\n    </form>\n}\n\nconst ProfileDataFormReduxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm)\n\nexport default ProfileDataFormReduxForm;","import css from \"./ProfileInfo.module.css\";\nimport pirate_island from \"./pirate_island.jpg\";\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport common_avatar from \"../../../assets/images/common_avatar.jpg\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport {useState} from \"react\";\nimport ProfileDataForm from \"./ProfileDataForm\";\n\nconst ProfileInfo = ({profile, status, updateUserStatus, isOwner, savePhoto, saveProfile}) => {\n\n    const [editMode, setEditMode] = useState(false);\n\n    // Пока информация о профайле не пришла с сервера - отображаем preloader.\n    if (!profile) {\n        return <Preloader/>;\n    }\n\n    const onAvatarSelected = (e) => {\n        if (e.target.files.length) {\n            savePhoto(e.target.files[0]);\n        }\n    }\n\n    // В \"родительский\" submit приходят все данные из формы.\n    // Конкретно тут сделано не совсем правильно. Нужно стремиться к отсутствию промисов в диспатчах.\n    const onSubmit = (formData) => {\n        saveProfile(formData)\n            .then(() => {\n                setEditMode(false);\n            })\n    }\n\n    // initialValues нужна для того что бы при входе в режим редактирования, поля формы не были пустыми.\n    return (\n        <div>\n            {/*<div>\n                <img className={css.pirate_island} src={pirate_island} alt=\"Pirate island\"/>\n            </div>*/}\n            <div className={css.descriptionBlock}>\n                <img src={profile.photos.large || common_avatar}\n                     className={css.userAvatar} alt={'Avatar'}/>\n                {isOwner && <div><input type={\"file\"} onChange={onAvatarSelected}/></div>}\n                {editMode\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\n                    : <ProfileData activateEditMode={() => {\n                        setEditMode(true)\n                    }} profile={profile} isOwner={isOwner}/>}\n                <ProfileStatusWithHooks status={status} updateUserStatus={updateUserStatus}/>\n            </div>\n        </div>\n    )\n};\n\nconst ProfileData = ({profile, isOwner, activateEditMode}) => {\n    return <div>\n        <div>{isOwner && <button onClick={activateEditMode}>Edit</button>}</div>\n        <div><b>Name:</b> {profile.fullName}</div>\n        <div><b>Looking for a job:</b> {profile.lookingForAJob ? \"yes\" : \"no\"}</div>\n        {profile.lookingForAJob && <div><b>My skills:</b> {profile.lookingForAJobDescription}</div>}\n        <div><b>About me:</b> {profile.aboutMe}</div>\n        <div><b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\n        })}</div>\n    </div>\n}\n\nconst Contact = ({contactTitle, contactValue}) => {\n    return <div className={css.contact}><b>{contactTitle}: </b>{contactValue}</div>\n}\n\nexport default ProfileInfo;\n","export default __webpack_public_path__ + \"static/media/ava_cartman.17cfc4ad.jpg\";","import css from \"./Post.module.css\";\nimport ava_cartman from \"./ava_cartman.jpg\";\n\nconst Post = (props) => {\n    const {message, likesCount, id} = props;\n    return (\n        <div className={css.item}>\n            <img alt=\"Avatar\" src={ava_cartman}/>\n            {message}\n            <div>\n                <span>Likes: {likesCount}</span>\n            </div>\n        </div>\n    );\n};\n\nexport default Post;\n","import css from \"./MyPosts.module.css\";\nimport Post from \"./Post/Post\";\nimport React from \"react\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators\";\nimport {Textarea} from \"../../common/FormControls/FormControls\";\n\nconst maxLength10 = maxLengthCreator(10);\n\nconst MyPosts = (props) => {\n\n    const postItems = [...props.posts]\n        .reverse()\n        .map(post => <Post message={post.message} likesCount={post.likesCount} key={post.id} id={post.id}/>);\n\n    const onAddingNewPost = (values) => {\n        props.addNewPost(values.newPostText);\n    };\n\n    return (\n        <div className={css.postsBlock}>\n            <h3>My posts</h3>\n            <AddNewPostReduxForm onSubmit={onAddingNewPost}/>\n            <div className={css.posts}>{postItems}</div>\n        </div>\n    );\n};\n\nconst AddNewPostForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder='New post text' component={Textarea} name='newPostText'\n                       validate={[required, maxLength10]}/>\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddNewPostReduxForm = reduxForm({form: 'profileAddNewPostForm'})(AddNewPostForm);\n\nexport default MyPosts;\n","import {addNewPost} from \"../../../redux/profileReducer\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\n\n// Возвращает объект с данными из state которые будут переданы в презентационную компоненту в качестве пропсов.\nconst mapStateToProps = (state) => {\n    return {\n        posts: state.profileState.posts,\n    }\n};\n\n// Connect создаёт контейнерную компоненту внутри которой отрисовывает презентационную компоненту.\n// В презентационную компоненту в виде пропсов передаются данные из объектов которые возвращаются двумя функциями.\n// Когда происходят изменения, connect перерисовывает компоненту.\nexport default connect(mapStateToProps, {addNewPost})(MyPosts);\n\n// Вместо функции mapDispatchToProps вторым параметром мы передаем объект.\n// Connect сам приведет его к виду follow: (userId) => dispatch(followActionCreator(userId)).\n// Как и в случае с mapStateToProps, колбэки будут переданы в презентационную компоненту в качестве пропсов.\n","import css from \"./Profile.module.css\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport React from \"react\";\n\nconst Profile = ({profile, status, updateUserStatus, isOwner, savePhoto, saveProfile}) => {\n    return (\n        <div>\n            <div className={css.left}>\n                <ProfileInfo savePhoto={savePhoto}\n                             isOwner={isOwner}\n                             profile={profile}\n                             status={status}\n                             updateUserStatus={updateUserStatus}\n                             saveProfile={saveProfile}/>\n            </div>\n            <div>\n                <MyPostsContainer/>\n            </div>\n        </div>\n    );\n};\n\nexport default Profile;\n","import React from \"react\";\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getUserProfile, getUserStatus, savePhoto, saveProfile, updateUserStatus} from \"../../redux/profileReducer\";\nimport {withRouter} from \"react-router-dom\";\nimport {compose} from \"redux\";\n\n// Вторая контейнерная компонента которая делает AJAX-запрос и отрисовывает презентационную компоненту.\nclass ProfileContainer extends React.Component {\n\n    refreshProfile() {\n        const {getUserProfile, getUserStatus, authorizedUserId} = this.props;\n        let {userId} = this.props.match.params; // Эта информация приходит в пропсы благодаря хоку withRouter.\n        if (!userId) {\n            userId = authorizedUserId;\n            if (!userId) {\n                // редирект можно делать через history.push.\n                this.props.history.push('/login');\n            }\n        }\n        // Запрашиваем информацию о профиле пользователя.\n        getUserProfile(userId);\n        getUserStatus(userId);\n    }\n\n    // Этот метод вызывается сразу после вставки компоненты в DOM.\n    // В данном случае, он получает и устанавливает данные о пользовательском профайле.\n    componentDidMount() {\n        this.refreshProfile();\n    }\n\n    // Этот метод вызывается при изменении state или получении новых props (не вызывается при первоначальной отрисовке).\n    // Во избежания зацикливания и ошибки, все изменения внутри componentDidUpdate должны быть внутри условия.\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\n            this.refreshProfile();\n        }\n    }\n\n    render() {\n        const {profile, status, updateUserStatus, savePhoto, saveProfile} = this.props;\n        return (\n            <Profile isOwner={!this.props.match.params.userId} savePhoto={savePhoto}\n                     profile={profile} status={status} updateUserStatus={updateUserStatus}\n                     saveProfile={saveProfile}/>\n        );\n    }\n}\n\n// Возвращает объект с данными из state которые будут переданы в презентационную компоненту в качестве пропсов.\nconst mapStateToProps = (state) => ({\n    profile: state.profileState.profile,\n    status: state.profileState.status,\n    authorizedUserId: state.authState.id,\n});\n\n// Объединение разных обработчиков функцией compose.\nexport default compose(\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus, savePhoto, saveProfile}),\n    withRouter,\n)(ProfileContainer);\n\n/*\nwithRouter это HOC-обертка передающая в компоненту данные из URL.\n\nConnect создаёт контейнерную компоненту внутри которой отрисовывает другую компоненту и в виде пропсов передают в неё\nданные из объектов которые возвращаются двумя функциями. Когда происходят изменения, connect перерисовывает компоненту.\n\nВместо функции mapDispatchToProps вторым параметром мы передаем объект. Connect сам приведет его к виду:\nfollow: (userId) => dispatch(followActionCreator(userId)).\nКак и в случае с mapStateToProps, колбэки будут переданы в презентационную компоненту в качестве пропсов.\n*/\n"],"sourceRoot":""}