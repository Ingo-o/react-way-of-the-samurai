{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/pirate_island.jpg","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/ava_cartman.jpg","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","e","currentTarget","value","autoFocus","onBlur","updateUserStatus","onDoubleClick","ProfileInfo","profile","className","css","descriptionBlock","src","photos","large","common_avatar","userAvatar","alt","fullName","aboutMe","Preloader","Post","message","likesCount","id","item","ava_cartman","maxLength10","maxLengthCreator","AddNewPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","name","validate","required","MyPosts","posts","addNewPost","postItems","reverse","map","p","postsBlock","values","newPostText","connect","state","profileState","Profile","MyPostsContainer","ProfileContainer","this","getUserProfile","getUserStatus","authorizedUserId","userId","match","params","history","push","React","Component","compose","authState","withRouter"],"mappings":"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","file":"static/js/3.a17e83b6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pirate_island\":\"ProfileInfo_pirate_island__1-UnM\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3cd8Y\",\"userAvatar\":\"ProfileInfo_userAvatar__qlIFO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2ifKf\",\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\"};","export default __webpack_public_path__ + \"static/media/pirate_island.7c820348.jpg\";","import React, {useEffect, useState} from \"react\";\n\n// Локальный state синхронизируется с глобальным один раз в самом начале формирования компоненты.\n// В это время пропсы еще могут отсутствовать (зависит от того что первым придет с сервера, status или profile).\n// Поэтому нужна дополнительная синхронизация локального и глобального статусов через useEffect.\nconst ProfileStatusWithHooks = (props) => {\n\n    // Хук useState возвращает массив из 2 значений.\n    // Первое это непосредственно наш state. Второе это функция для изменения этого state.\n    // Через аргумент задается initialState.\n    const [editMode, setEditMode] = useState(false);\n    const [status, setStatus] = useState(props.status);\n\n    // Хук useEffect запускает колбэк если изменяется что-то из массива условий.\n    // В данном случае он нужен для ситуаций когда status вернулся уже после отрисовки profile.\n    useEffect(() => {\n        setStatus(props.status);\n    }, [props.status]);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateUserStatus(status);\n    }\n\n    const onStatusChange = (e) => {\n        setStatus(e.currentTarget.value);\n    }\n\n    return (\n        <div>\n            {editMode\n                ? <div><input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\n                              value={status}/></div>\n                : <div onDoubleClick={activateEditMode}><span>{props.status || 'No status'}</span></div>\n            }\n        </div>\n    )\n}\n\n\nexport default ProfileStatusWithHooks;","import css from \"./ProfileInfo.module.css\";\nimport pirate_island from \"./pirate_island.jpg\";\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport common_avatar from \"../../../assets/images/common_avatar.jpg\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\n\nconst ProfileInfo = ({profile, status, updateUserStatus}) => {\n    // Пока информация о профайле не пришла с сервера - отображаем preloader.\n    if (!profile) {\n        return <Preloader/>;\n    }\n\n    return (\n        <div>\n            {/*<div>\n                <img className={css.pirate_island} src={pirate_island} alt=\"Pirate island\" />\n            </div>*/}\n            <div className={css.descriptionBlock}>\n                <img src={profile.photos.large !== null ? profile.photos.large : common_avatar}\n                     className={css.userAvatar} alt={'Avatar'}/>\n                <ProfileStatusWithHooks status={status} updateUserStatus={updateUserStatus}/>\n                <div>{profile.fullName}</div>\n                <div>{profile.aboutMe}</div>\n            </div>\n        </div>\n    )\n};\n\nexport default ProfileInfo;\n","export default __webpack_public_path__ + \"static/media/ava_cartman.17cfc4ad.jpg\";","import css from \"./Post.module.css\";\nimport ava_cartman from \"./ava_cartman.jpg\";\n\nconst Post = (props) => {\n    const {message, likesCount, id} = props;\n    return (\n        <div className={css.item}>\n            <img alt=\"Avatar\" src={ava_cartman}/>\n            {message}\n            <div>\n                <span>Likes: {likesCount}</span>\n            </div>\n        </div>\n    );\n};\n\nexport default Post;\n","import css from \"./MyPosts.module.css\";\nimport Post from \"./Post/Post\";\nimport React from \"react\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../common/FormControls/FormControls\";\n\nconst maxLength10 = maxLengthCreator(10);\n\nconst MyPosts = (props) => {\n    const {posts, addNewPost} = props;\n\n    const postItems = [...posts]\n        .reverse()\n        .map(p => <Post message={p.message} likesCount={p.likesCount} key={p.id} id={p.id}/>);\n\n    const onAddingNewPost = (values) => {\n        addNewPost(values.newPostText);\n    };\n\n    return (\n        <div className={css.postsBlock}>\n            <h3>My posts</h3>\n            <AddNewPostReduxForm onSubmit={onAddingNewPost}/>\n            <div className={css.posts}>{postItems}</div>\n        </div>\n    );\n};\n\nconst AddNewPostForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder='New post text' component={Textarea} name='newPostText'\n                       validate={[required, maxLength10]}/>\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddNewPostReduxForm = reduxForm({form: 'profileAddNewPostForm'})(AddNewPostForm);\n\nexport default MyPosts;\n","import {addNewPost} from \"../../../redux/profileReducer\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\n\n// Возвращает объект с данными из state которые будут переданы в презентационную компоненту в качестве пропсов.\nconst mapStateToProps = (state) => {\n    return {\n        posts: state.profileState.posts,\n    }\n};\n\n// Connect создаёт контейнерную компоненту внутри которой отрисовывает презентационную компоненту.\n// В презентационную компоненту в виде пропсов передаются данные из объектов которые возвращаются двумя функциями.\n// Когда происходят изменения, connect сам перерисовывает дерево.\nexport default connect(mapStateToProps, {addNewPost})(MyPosts);\n\n// Вместо функции mapDispatchToProps вторым параметром мы передаем объект.\n// Connect сам приведет его к виду follow: (userId) => dispatch(followActionCreator(userId)).\n// Как и в случае с mapStateToProps, колбэки будут переданы в презентационную компоненту в качестве пропсов.\n","import css from \"./Profile.module.css\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport React from \"react\";\n\nconst Profile = (props) => {\n    const {profile, status, updateUserStatus} = props;\n    return (\n        <div>\n            <ProfileInfo profile={profile} status={status} updateUserStatus={updateUserStatus}/>\n            <MyPostsContainer/>\n        </div>\n    );\n};\n\nexport default Profile;\n","import React from \"react\";\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getUserProfile, getUserStatus, updateUserStatus} from \"../../redux/profileReducer\";\nimport {withRouter} from \"react-router-dom\";\nimport {compose} from \"redux\";\n\n// Вторая контейнерная компонента которая делает AJAX-запрос и отрисовывает презентационную компоненту.\nclass ProfileContainer extends React.Component {\n    // Этот метод вызывается сразу после вставки компоненты в DOM.\n    // Он получает и устанавливает данные о пользовательском профайле.\n    componentDidMount() {\n        const {getUserProfile, getUserStatus, authorizedUserId} = this.props;\n        let {userId} = this.props.match.params; // Эта информация приходит в пропсы благодаря обертке withRouter.\n        if (!userId) {\n            userId = authorizedUserId;\n            if(!userId) {\n                // редирект можно делать через history.push.\n                this.props.history.push('/login');\n            }\n        }\n        // Запрашиваем информацию о профиле пользователя.\n        getUserProfile(userId);\n        getUserStatus(userId);\n    }\n\n    render() {\n        const {profile, status, updateUserStatus} = this.props;\n        return (\n            <Profile profile={profile} status={status} updateUserStatus={updateUserStatus}/>\n        );\n    }\n};\n\n// Возвращает объект с данными из state которые будут переданы в презентационную компоненту в качестве пропсов.\nconst mapStateToProps = (state) => ({\n    profile: state.profileState.profile,\n    status: state.profileState.status,\n    authorizedUserId: state.authState.id,\n});\n\n// Объединение разных обработчиков функцией compose.\nexport default compose(\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus}),\n    withRouter,\n)(ProfileContainer);\n\n/*\n1. withRouter - HOC-обертка передающая в компоненту данные из URL.\n\n2. Connect создаёт контейнерную компоненту вокруг другой компоненты и в виде пропсов передают в неё данные из объектов\nкоторые возвращаются двумя функциями. Когда происходят изменения, connect сам перерисовывает дерево.\n\nВместо функции mapDispatchToProps вторым параметром мы передаем объект. Connect сам приведет его к виду:\nfollow: (userId) => dispatch(followActionCreator(userId)).\nКак и в случае с mapStateToProps, колбэки будут переданы в презентационную компоненту в качестве пропсов.\n*/\n"],"sourceRoot":""}